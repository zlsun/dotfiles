
-- :set prompt "\ESC[1;31m%s\n\ESC[0;33mλ> \ESC[m"
:set prompt "\ESC[0;33mλ> \ESC[m"
:set prompt2 "\ESC[0;33m | \ESC[m"

let ghciEscapeShellArg arg = "'" ++ concatMap (\x -> if x == '\'' then "'\"'\"'" else [x]) arg ++ "'"

:def! hoogle \str -> return $ ":! hoogle --count=15 \"" ++ str ++ "\""
:def! search return . (":! hoogle --color --count=20 " ++) . ghciEscapeShellArg
:def! doc return . (":! hoogle --info " ++) . ghciEscapeShellArg

:set -XOverloadedStrings
:set -XScopedTypeVariables
:set -XRankNTypes

import Prelude

-- :set +t
:set +m

import qualified Language.Haskell.HsColour ( ColourPrefs(..) )
import qualified Language.Haskell.HsColour as HsColour
import qualified Language.Haskell.HsColour.Output as Output
import qualified Language.Haskell.HsColour.Colourise as Colourise
import qualified Text.Show.Pretty as Pretty

let
  funnyPrint :: (Show a) => a -> IO ()
  funnyPrint =
    let
      con :: String -> String
      con [] = []
      con li@(x:xs) | x == '\"' = '\"':str ++ "\"" ++ (con rest)
                    | x == '\'' = '\'':char:'\'':(con rest')
                    | otherwise = x:con xs where
                      (str,rest):_   = reads li :: [(String, String)]
                      (char,rest'):_ = reads li :: [(Char,   String)]
      prefs = HsColour.TTYg Output.XTerm256Compatible
      colours =
        let
          black   = Colourise.Foreground Colourise.Black
          red     = Colourise.Foreground Colourise.Red
          green   = Colourise.Foreground Colourise.Green
          yellow  = Colourise.Foreground Colourise.Yellow
          blue    = Colourise.Foreground Colourise.Blue
          magenta = Colourise.Foreground Colourise.Magenta
          cyan    = Colourise.Foreground Colourise.Cyan
          white   = Colourise.Foreground Colourise.White
          bold    = Colourise.Bold
        in
          Colourise.defaultColourPrefs
            { HsColour.conid    = [ yellow , bold ]
            , HsColour.conop    = [ yellow ]
            , HsColour.string   = [ green ]
            , HsColour.char     = [ cyan ]
            , HsColour.number   = [ magenta , bold ]
            , HsColour.layout   = [ white ]
            , HsColour.keyglyph = [ white ]
            }
      colorize = HsColour.hscolour prefs colours False False "" False
    in
      putStrLn . colorize . Pretty.ppShow
      -- putStrLn . colorize . con . Pretty.ppShow

:module -Language.Haskell.HsColour

:def color (\_ -> return ":set -interactive-print=funnyPrint")
:def nocolor (\_ -> return ":set -interactive-print=print")

:color

