
# ============================= Plugins ===============================

DISABLE_UNTRACKED_FILES_DIRTY="true"
HIST_STAMPS="yyyy-mm-dd"

source ~/.zgen/zgen.zsh

if ! zgen saved; then
    echo "Creating a zgen save"

    zgen oh-my-zsh

    zgen loadall <<EOBUNDLES
        robbyrussell/oh-my-zsh plugins/autopep8
        robbyrussell/oh-my-zsh plugins/autoenv
        robbyrussell/oh-my-zsh plugins/colorize
        robbyrussell/oh-my-zsh plugins/command-not-found
        robbyrussell/oh-my-zsh plugins/dircycle
        robbyrussell/oh-my-zsh plugins/dirpersist
        robbyrussell/oh-my-zsh plugins/django
        robbyrussell/oh-my-zsh plugins/extract
        robbyrussell/oh-my-zsh plugins/github
        robbyrussell/oh-my-zsh plugins/gitignore
        robbyrussell/oh-my-zsh plugins/jsontools
        robbyrussell/oh-my-zsh plugins/npm
        robbyrussell/oh-my-zsh plugins/pep8
        robbyrussell/oh-my-zsh plugins/pip
        robbyrussell/oh-my-zsh plugins/python
        robbyrussell/oh-my-zsh plugins/sublime
        robbyrussell/oh-my-zsh plugins/virtualenv
        robbyrussell/oh-my-zsh plugins/virtualenvwrapper
        robbyrussell/oh-my-zsh plugins/web-search
        robbyrussell/oh-my-zsh plugins/zsh-navigation-tools

        zlsun/solarized-man
        # zlsun/umake

        Neki/fasd
        rimraf/k
        chrissicool/zsh-256color
        # horosgrisa/mysql-colorize

        zsh-users/zsh-syntax-highlighting
        zsh-users/zsh-completions src
        zsh-users/zsh-history-substring-search

        # autosuggestions should be loaded last
        tarruda/zsh-autosuggestions

EOBUNDLES

    zgen load zlsun/avit-mod avit-mod

    zgen save
fi

# bind UP and DOWN arrow keys
zmodload zsh/terminfo
# bindkey "$terminfo[kcuu1]" history-substring-search-up
# bindkey "$terminfo[kcud1]" history-substring-search-down

# bind UP and DOWN arrow keys (compatibility fallback
# for Ubuntu 12.04, Fedora 21, and MacOSX 10.9 users)
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# bind P and N for EMACS mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# bind k and j for VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

AUTOSUGGESTION_HIGHLIGHT_COLOR='fg=11'
AUTOSUGGESTION_HIGHLIGHT_CURSOR=0

autoload znt-history-widget
zle -N znt-history-widget
bindkey "^R" znt-history-widget

# Enable autosuggestions automatically.
zle-line-init() {
    zle autosuggest-start
}
zle -N zle-line-init

# ======================== User configuration ==========================

# Functions

find-duplicate() {
    local dir=${1:-.}
    find $dir -type f -print0                   \
        | xargs -0 -n1 md5sum                   \
        | sort -k 1,32                          \
        | uniq -w 32 -d --all-repeated=separate \
        | sed -e 's/^[0-9a-f]*\ *//;'
}

top-commands() {
    cat ~/.zsh_history                                      \
        | cut -d ';' -f 2- 2>/dev/null                      \
        | awk '{a[$1]++}END{for(i in a){print a[i] " " i}}' \
        | sort -rn                                          \
        | head $*
}

pacman-reinstall-all-packages() {
    comm -23 <(pacman -Qeq) <(pacman -Qmq) | pacman -S -
    comm -23 <(pacman -Qdq) <(pacman -Qmq) | pacman -S --asdeps -
}

bgit() {
    local color='\e[1;31m'
    local reset='\e[0m'
    local echo_cmd="echo -e '${color}[{}]$reset'"
    local git_cmd="git --git-dir={}/.git --work-tree={} $*"
    local cmd="$echo_cmd && $git_cmd"
    printf "%s\n" */ | cut -d'/' -f1 | xargs -I '{}' sh -c $cmd
}

pgit() {
    local color='\e[1;31m'
    local reset='\e[0m'
    local echo_cmd="echo -e '${color}[{}]$reset'"
    local git_cmd="git --git-dir={}/.git --work-tree={} $*"
    local cmd="$echo_cmd && $git_cmd"
    printf "%s\n" */ | cut -d'/' -f1 | parallel $cmd
}

ptyless() {
    zmodload zsh/zpty
    zpty ptyless ${1+"$@"}            # ptyless, name of pty
    zpty -r ptyless > /tmp/ptyless.$$ # Write to file, just dunno why pipeline doesn't work fine here
    less /tmp/ptyless.$$
    rm -f /tmp/ptyless.$$
    zpty -d ptyless                   # remove used pty
}

fawk() {
    awk "{print \$${1}}"
}

vimrename() {
    local dir=${1:-.}
    vim -c "cd $dir|Renamer"
}

enable-proxy() {
    export http_proxy=http://127.0.0.1:8087
    export https_proxy=http://127.0.0.1:8087
}

disable-proxy() {
    unset http_proxy
    unset https_proxy
}

exists() {
    type $1 &> /dev/null
}

# ZSH

autoload -U zmv

# `Frozing' tty, so after any command terminal settings will be restored
ttyctl -f

setopt HIST_IGNORE_DUPS

# make zsh know about hosts already accessed by SSH
zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync):hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'

# Key bindings

# Ctrl-Z: switch to foreground
bindkey -s '^Z' '^q fg\n'

# Ctrl+Enter: execute suggesstion provided by zsh-autosuggestions
bindkey '^J' autosuggest-execute-suggestion

bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char

bindkey -M menuselect 'a' vi-backward-char
bindkey -M menuselect 's' vi-down-line-or-history
bindkey -M menuselect 'w' vi-up-line-or-history
bindkey -M menuselect 'd' vi-forward-char

bindkey -M menuselect '/' accept-and-infer-next-history
bindkey -M menuselect '.' undo
bindkey -M menuselect ' ' accept-and-hold
bindkey -M menuselect ';' history-incremental-search-forward

toggle-sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    if [[ $BUFFER == s\ * ]]; then
        LBUFFER="${LBUFFER#sudo }"
    else
        LBUFFER="s $LBUFFER"
    fi
}
zle -N toggle-sudo-command-line
bindkey "\e\e" toggle-sudo-command-line

toggle-man-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    if [[ $BUFFER == man\ * ]]; then
        LBUFFER="${LBUFFER#man }"
    else
        LBUFFER="man $LBUFFER"
    fi
}
zle -N toggle-man-command-line
bindkey "\em" toggle-man-command-line

toggle-help-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    if [[ $BUFFER == *\ --help ]]; then
        LBUFFER="${LBUFFER% --help}"
    else
        LBUFFER="$LBUFFER --help"
    fi
}
zle -N toggle-help-command-line
bindkey "\eh" toggle-help-command-line

# Aliases

# enable alias when use sudo
# http://askubuntu.com/a/22043/399470
alias s='sudo '

# enable <C-S> in vim
alias vim="stty stop '' -ixoff ; vim"

# shorten frequent commands
alias c='cat'
alias h='history'
alias g='git'
alias q='exit'
alias v='vim'
alias ec='echo'
alias fk='eval $(thefuck $(fc -ln -1))' # thefuck <https://github.com/nvbn/thefuck>
alias gg='git gui'
alias sv='s v'
alias wh='which'

# meaning aliases
alias info='info --vi-key'
alias help='man'
alias unexport='unset'

# commands with options
alias grep='grep --color'
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS} '
alias hgrep='fc -El 0 | grep'
alias sortnr='sort -n -r'
alias dud='du -d 1 -h'
alias duf='du -sh *'
alias fd='noglob find . -type d -name'
alias ff='noglob find . -type f -name'

# prompt before operating file
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias mmv='noglob zmv -W'

# quick access to files
alias srcls='$EDITOR /etc/apt/sources.list'
alias pcmcf='$EDITOR /etc/pacman.conf'
alias tmxcf='$EDITOR ~/.tmux.conf'
alias vimrc='$EDITOR ~/.vimrc'
alias zshrc='$EDITOR ~/.zshrc'
alias i3cfg='$EDITOR ~/.i3/config'

# l* -> ls
alias    l='ls -lFh'    # size,show type,human readable
alias   la='ls -lAFh'   # long list,show almost all,show type,human readable
alias   lr='ls -tRFh'   # sorted by date,recursive,show type,human readable
alias   lt='ls -ltFh'   # long list,sorted by date,show type,human readable
alias   ll='ls -l'      # long list
alias ldot='ls -ld .*'
alias   lS='ls -1FSsh'
alias lart='ls -1Fcart'
alias  lrt='ls -1Fcrt'

# m* -> make
alias   m='make'
alias  mr='make run'
alias mcl='make clean'
alias mrb='make rebuild'

# py* -> python
alias  py='python'
alias py2='python2'
alias py3='python3'

alias   pyi='sudo -H pip install'
alias  pyi2='sudo -H pip2 install'
alias  pyi3='sudo -H pip3 install'
alias  pyiu='pip install --user'
alias pyiu2='pip2 install --user'
alias pyiu3='pip3 install --user'
alias   pyu='sudo -H pip uninstall'
alias  pyu2='sudo -H pip2 uninstall'
alias  pyu3='sudo -H pip3 uninstall'

alias  pyftp='python -m pyftpdlib'
alias pyhttp='python3 -m http.server'

alias     pypf='python -m cProfile'
alias    pypf2='python2 -m cProfile'
alias    pypf3='python3 -m cProfile'
alias   pytime='python -m timeit'
alias  pytime2='python2 -m timeit'
alias  pytime3='python3 -m timeit'
alias  pytrace='python -m trace'
alias pytrace2='python2 -m trace'
alias pytrace3='python3 -m trace'
alias    pypdb='python -m pdb'
alias   pypdb2='python2 -m pdb'
alias   pypdb3='python3 -m pdb'

alias  ipy='ipython'
alias ipy2='ipython2'
alias ipy3='ipython3'
alias  iqt='ipython qtconsole'
alias iqt2='ipython2 qtconsole'
alias iqt3='ipython3 qtconsole'
alias   nb='ipython notebook'
alias  nb2='ipython2 notebook'
alias  nb3='ipython3 notebook'

alias pti='ptipython'

# rsync-* -> rsync
alias rsync-copy="rsync -avz --progress -h"
alias rsync-move="rsync -avz --progress -h --remove-source-files"
alias rsync-update="rsync -avzu --progress -h"
alias rsync-sync="rsync -avzu --delete --progress -h"
alias cpv="rsync -poghb --backup-dir=/tmp/rsync -e /dev/null --progress --"

# sc[u]-* -> systemctl
user_commands=(
  list-units is-active status show help list-unit-files
  is-enabled list-jobs show-environment cat)

sudo_commands=(
  start stop reload restart try-restart isolate kill
  reset-failed enable disable reenable preset mask unmask
  link load cancel set-environment unset-environment
  hybrid-sleep hibernate poweroff
  edit)

for c in $user_commands; do; alias sc-$c="systemctl $c"; done
for c in $sudo_commands; do; alias sc-$c="sudo systemctl $c"; done
for c in $sudo_commands; do; alias scu-$c="systemctl --user $c"; done

# sg* -> apt-*
alias sga='sudo apt-get autoremove'
alias sgc='sudo apt-get autoclean'
alias sgd='sudo apt-get dist-upgrade'
alias sgg='sudo apt-get upgrade'
alias sgi='sudo apt-get install'
alias sgp='sudo apt-get remove --purge'
alias sgr='sudo apt-get remove'
alias sgu='sudo apt-get update'
alias sgs='apt-cache search'
alias sgf='apt-file search'

# ya* -> yaourt
alias    yaq='yaourt -Q'
alias   yadt='yaourt -Qdt'
alias   yaqe='yaourt -Qe'
alias   yaqi='yaourt -Qi'
alias   yaqk='yaourt -Qk'
alias   yaql='yaourt -Ql'
alias   yaqm='yaourt -Qm'
alias   yaqo='yaourt -Qo'
alias   yaqs='yaourt -Qs'
alias  yaqem='yaourt -Qem'
alias  yaqii='yaourt -Qii'
alias    yar='yaourt -R'
alias   yars='yaourt -Rs'
alias  yarsn='yaourt -Rsn'
alias    yas='yaourt -S'
alias   yasi='yaourt -Si'
alias   yass='yaourt -Ss'
alias   yasy='yaourt -Sy'
alias  yasii='yaourt -Sii'
alias  yasyu='yaourt -Syu'
alias  yasyy='yaourt -Syy'
alias yasyua='yaourt -Syua'
alias yasyyu='yaourt -Syyu'
alias    yau='yaourt -U'
alias    yac='yaourt -C'
alias    yab='yaourt -B'
alias    yag='yaourt -G'
alias    yat='yaourt --stats'

# how* -> howdoi <https://github.com/gleitz/howdoi>
alias howdoi='howdoi -c'
alias    how='howdoi'
alias   howc='howdoi c'
alias  howcp='howdoi c++'
alias howcss='howdoi css'
alias  howjs='howdoi js'
alias  howjv='howdoi java'
alias  howml='howdoi html'
alias  howpy='howdoi python'
alias  howsh='howdoi shell'

# k* -> k <https://github.com/rimraf/k>
alias  k='k -h'
alias ka='k -h -A'

# fasd <https://github.com/clvv/fasd>
export _FASD_VIMINFO="~/.vim/info"
export _FASD_BACKENDS="native viminfo current"
alias A='fasd -A'
alias D='fasd -D'
alias o='fasd -a -B recently-used -e $XOPEN'

# open file depends on their SUFFIX
if [ ${ZSH_VERSION//\./} -ge 420 ]; then
    # open browser on urls
    _browser_fts=(htm html de org net com at cx nl se dk dk php)
    for ft in $_browser_fts ; do alias -s $ft=$XOPEN ; done

    _editor_fts=(asc c cc cpp cxx h hh ini tex txt TXT)
    for ft in $_editor_fts ; do alias -s $ft=$EDITOR ; done

    _image_fts=(bmp gif jpg jpeg mng png tif tiff xpm)
    _media_fts=(ape avi flv mkv mov mp3 mpeg mpg ogg ogm rm wav webm)
    _doc_fts=(pdf doc docx xls xlsx ppt ps dvi chm djvu)
    for ft in $_image_fts $_media_fts $_doc_fts ; do alias -s $ft=$XOPEN ; done

    # list whats inside packed file
    alias -s zip="unzip -l"
    alias -s rar="unrar l"
    alias -s tar="tar tf"
    alias -s tar.gz="echo "
    alias -s ace="unace l"
fi

# command line tail shortcuts
alias -g G='| grep'
alias -g H='| head'
alias -g L="| less"
alias -g M="| most"
alias -g S='| sed'
alias -g T='| tail'
alias -g U='| uniq'
alias -g W='| gawk'
alias -g X='| xargs'
alias -g SS='| sort'
alias -g WC='| wc'
alias -g CA="2>&1 | cat -A"
alias -g LL="2>&1 | less"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"
alias -g P="2>&1| pygmentize -l pytb"

# Others

eval `dircolors ~/.dircolors`

if [[ $(tty|grep -o '/dev/tty') = /dev/tty ]] && exists fbterm; then
    # exec fbterm
elif [[ ! $TERM =~ screen ]] && exists tmux; then
    # TERM=screen-256color exec tmux
fi

