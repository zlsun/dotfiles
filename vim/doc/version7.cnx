*version7.txt*  For Vim version 7.0.  最近更新: 2006年5月


		  VIM 参考手册	  by Bram Moolenaar
				译者: Willis
				http://vimcdoc.sf.net


欢迎来到 Vim 版本 7！新版本增加了很多新特性。本文档列出所有加入的新项目、已
有特性的改动以及 Vim 6.x 以来的漏洞修正。使用这个命令可以看到你使用的版本: >
	:version

|vi_diff.txt| 提供 Vi 和 Vim 7.0 的区别的一个概述。
|version4.txt| 说明 Vim 3.x 和 Vim 4.x 的区别。
|version5.txt| 说明 Vim 4.x 和 Vim 5.x 的区别。
|version6.txt| 说明 Vim 5.x 和 Vim 6.x 的区别。

不 兼 容 的 改 动			|incompatible-7|

新 特 性				|new-7|

Vim 脚本增强            		|new-vim-script|
拼写检查				|new-spell|
全能补全				|new-omni-completion|
MzScheme 接口				|new-MzScheme|
打印多字节文本				|new-print-multi-byte|
标签页					|new-tab-pages|
撤销分支				|new-undo-branches|
扩展的 Unicode 支持			|new-more-unicode|
更多高亮				|new-more-highlighting|
翻译的手册页				|new-manpage-trans|
内部 grep				|new-vimgrep|
消息往回滚动				|new-scroll-back|
光标超越行尾				|new-onemore|
POSIX 相容性				|new-posix|
调试器支持				|new-debug-support|
远程文件探索器				|new-netrw-explore|
定义操作符				|new-define-operator|
映射到表达式				|new-map-expression|
可视和选择模式映射			|new-map-select|
位置列表				|new-location-list|
若干新项目				|new-items-7|

改 进					|improvements-7|

编 译 时 的 改 变			|compile-changes-7|

漏 洞 修 正				|bug-fixes-7|

(译者注: 各版本的修正一节，因内容过于琐碎，保留原文未翻译)

==============================================================================
不 兼 容 的 改 动				*incompatible-7*

这些改动和以前版本不兼容。如果从 Vim 6.x 升级到 7.0 时出现问题，检查这个列表。

":write file" 命令不再复位缓冲区的 'modified' 标志位，除非 'cpoptions' 里包含
'+' 标志位 |cpo-+|。本来的行为不合逻辑，因为缓冲区和原来的文件相比，仍然有修改
的内容。另外，撤销所有改变时，文件仍然会被标记为修改状态。现在，执行此命令后用
":quit" 会失败。

":helpgrep" 现在使用帮助窗口来显示匹配。

参数列表里本来可用双引号在文件名里包含空格。这使得 ":edit" 和 ":next" 转义双引
号时的行为不同，而且和 Vi 有些版本也不兼容。
	命令			Vim 6.x	文件名		Vim 7.x 文件名 ~
	:edit foo\"888		foo"888			foo"888
	:next foo\"888		foo888			foo"888
	:next a\"b c\"d		ab cd			a"b  和  c"d

在 |literal-string| 里，单引号加倍可以得到一个。":echo 'a''b'" 本来返回
"a b"，现在因为两个引号代表一个，它返回 "a'b"。

用 ":w! fname" 覆盖文件时，本来不会警告 "fname" 正在被另一个 Vim 编辑。Vim 现
在给出错误信息 |E768|。

删除了 Mac OS 9 的支持。

.tex 结尾的文件现在设置 'filetype' 为 "context"、"plaintex" 或 "tex"。
|ft-tex-plugin|


次要不兼容点:

文件类型检测: 许多类型用 */.dir/filename 代替了 ~/.dir/filename，从而也能使用
别的用户的文件。

不少文件类型的缩进设置从文件类型插件移到了缩进插件。如果你用: >
	:filetype plugin on
有些缩进设置可能会丢失。你需要用: >
	:filetype plugin indent on

":0verbose" 现在设置 'verbose' 为零而不是一。

删除了旧且不完整的 "VimBuddy" 代码。

无名缓冲区报告 "No Name" 而不是 "No File"。过去这和有名字但 'buftype' 设为
"nofile" 的缓冲区容易混淆。

如果 ":file xxx" 用于无名缓冲区，不设置轮换文件名。这避免了没有意义的另一个无
名缓冲区的建立。

"2html.vim" 脚本现在把关闭折叠也转换到 HTML。因为折叠的打开关闭相同，HTML 看上
去和显示接近。如果不要 HTML 用折叠，用 "zR" 或 "let html_ignore_folding=1"。
(部分来自 Carl Osterwisch)
diff 模式也被转换到 HTML，和显示一致。

Win32: <F10> 键的效果过去取决于 'winaltkeys'。现在它取决于 <F10> 是否被映射。
这样就可以映射 <F10> 而不修改 'winaltkeys'。

如果 'nrformats' 包含 'octal'，"08" 上用 CTRL-A 过去得到 "018"，这不合逻辑。现
在得到 "9"。同时也删除引导的一到多个零，以免 "009" 递增到 "010" 后该数变成八进
制。

如果 'encoding' 设为一个 Unicode 编码，'fileencodings' 的值现在在 "latin1" 之
前包含 "default"。这意味着如有可能，8 位编码的文件缺省使用环境指定的编码。以前
总是使用 latin1，在非 latin1 的环境下这是错的，俄语就是如此。

如果有两个窗口存在且都显示帮助文件时，过去用 ":quit" 会退出。现在只关闭窗口。

"-w {scriptout}" 只有当 {scriptout} 不以数位开头时才可用。否则，用它设置
'window' 选项。

<Home> 和 <xHome> 过去可以分别映射。这样做的缺点是所有映射 (加上修饰符) 不得不
都重复一遍，因为你不能确信键盘会产生哪个值。现在所有的 <xHome> 在内部都被翻译
为 <Home>，键码和映射都是。同样的改动也适用于 <xEnd>、<xF1> 等键。

":put" 现在把光标放在插入的末行。

如果 .gvimrc 存在，关闭 'compatible'，就像 ".vimrc" 文件存在时一样。

用 "vlllU" 或类似的命令使字符串大写时，德语 sharp s 被替换为 "SS"。因为兼容性
问题，"~" 不这么做，这也是因为 "SS" 不能被改回 sharp s。

"gd" 过去在函数里找到变量的第一次出现，而这可以是没有类型的函数参数。现在只会
去找包含类型的位置。

函数里的继续行过去不参加计算，错误信息的行号是逻辑行而不是源代码里的行。这使得
定位错误十分困难。现在包含函数开始处起算的源代码行号。这也意味着 ":breakadd
func" 里的行号含义有了变化。

用 |:command| 定义用户命令时，过去特殊项目可以是缩写。这导致不可预测的行为，如
<li> 会被识别为 <line1>。现在这些项目不再允许缩写。

执行 FileChangedRO 自动命令时，不再允许切换到另一个缓冲区或者编辑另一个文件。
这是为了防止崩溃 (激活事件所在的代码埋藏得很深，那里我们不期待改变缓冲区)。但
重新载入缓冲区仍然允许。

|more-prompt| 和 |hit-enter-prompt| 提示上，如果置位 'more' 选项，现在可以使用
'k'、'u'、'g' 和 'b' 键来往回滚动到以前的消息。它们不再用作预输入。

==============================================================================
新 特 性						*new-7*

Vim 脚本增强						*new-vim-script*
------------

Vim 脚本加入以下类型:

	|List|		项目的有序列表
	|Dictionary|	项目的关联数组
	|Funcref|	指向函数的引用

加入许多函数和命令以支持这些新类型。

用 |string()| 函数可以得到变量的字符串表示形式。这包括数值、字符串和它们的复合
形式。用 |eval()| 又可把字符串转换变量值。

|:let| 命令现在可用 "+="，"-=" 和 ".="。 >
	:let var += expr	" 相当于 :let var = var + expr
	:let var -= expr	" 相当于 :let var = var - expr
	:let var .= string	" 相当于 :let var = var . string

用 |:profile| 命令，你可以确定哪个函数或脚本最耗时。

Python 接口 vim.eval() 也能处理字典和列表。|python-eval| (G. Sumner Hayes)

加入 |getscript| 插件，提供从 www.vim.org 自动更新脚本的便捷方法。
(Charles Campbell)

加入 |vimball| 插件，提供发布包含一组文件 (插件文件、autoload 脚本、文档) 的插
件的便捷方法。(Charles Campbell)


拼写检查						*new-spell*
--------

Vim 已经集成了拼写检查。本来有一些脚本的实现，但都较慢和/或需要外部程序。

用 'spell'	  选项切换拼写检查的开关。
用 'spelllang'	  选项指定能接受的语言。
用 'spellfile'	  选项指定加入新词的文件名。
用 'spellsuggest' 选项指定提供建议的方法。

用 |[s| 和 |]s| 命令移动到下一个或前一个错误。
用 |zg| 和 |zw| 命令加入好词和坏词。
用 |z=| 	命令改正单词。
用 |:mkspell|	命令从单词列表生成 Vim 的拼写文件。

加入 "undercurl" 高亮属性，GUI 里可以清楚地指出拼写错误 (基于 Marcin Dalecki
的补丁)。
用 "guisp" 颜色指定和前景背景不同的第三种颜色。
可用高亮属性的数目从大约 220 个增加到超过 30000 个。这使拼写的属性和语法高亮的
属性可以进行合并。也可用于语法高亮和标注可视区域。

详情可见: |spell|。


全能补全					*new-omni-completion*
----------

本来可以叫 "intellisense" 的，但它已经是注册商标了。这是一种智能的补全形式，它
检视光标前面的文本，然后寻找后面可以跟什么内容。它可以用来提供结构和类的成员，
系统函数，等等。
(译者注: 原文为 omni completion，但 omni 具体何义并无解释。暂按其字面意思直译
为 "全能"。)

插入模式下用 CTRL-X CTRL-O 开始全能补全。|i_CTRL-X_CTRL-O|

文件类型插件设置 'omnifunc' 选项来定义进行补全的函数。

目前支持的语言:
	C					|ft-c-omni|
	(X)HTML，带有 CSS			|ft-html-omni|
	JavaScript				|ft-javascript-omni|
	PHP					|ft-php-omni|
	Python
	Ruby					|ft-ruby-omni|
	SQL					|ft-sql-omni|
	XML					|ft-xml-omni|
	任何支持语法高亮的语言			|ft-syntax-omni|

你可以加入自己的全能补全脚本。

如果 'completeopt' 选项包含 "menu"，使用 (相当原始的) 弹出菜单显示插入模式的补
全匹配。


MzScheme 接口						*new-MzScheme*
-------------

支持 MzScheme 解释器。|MzScheme|
用 |:mzscheme|	命令执行 MzScheme 命令。
用 |:mzfile|	命令执行 MzScheme 脚本文件。

这需要 Vim 编译时加入 |+mzscheme| 特性。


打印多字节文本						*new-print-multi-byte*
--------------

|:hardcopy| 命令现在支持多字节字符的 PostScript 打印。

为此可使用 'printmbcharset' 和 'printmbfont' 选项。
另见 |postscript-cjk-printing|。(Mike Williams)


标签页							*new-tab-pages*
-----

标签页 (tab page) 是包含一或多个窗口并在顶部贴有标签 (tab) 的页面 (page)。点击
标签可以快速在标签页间切换。键盘则可用 |gt| (转到标签页，Goto Tab) 命令。这是
一个需要使用很多窗口工作的便捷方式。

要在启动 Vim 时为每个文件参数打开一个单独的标签页，使用 |-p| 参数。
用 'tabpagemax' 设置可打开的最大标签页数。

标签页标签所在的行可以使用高亮的普通文本，也可以使用 GUI 的机制。GUI 标签看起
来更舒服，但只有少数系统支持。用 'tabline'、'guitablabel' 和 'guitabtooltip' 
可以定制标签页行，而它显示与否则由 'showtabline' 控制。至于是否使用 GUI 标签由
'guioptions' 的 "e" 标志位决定。

用 |:tab| 命令修饰符，多数打开新窗口的命令会用新标签页代替。

|--remote-tab| 参数使已运行的 Vim 服务器用新标签页编辑文件。

"t:" 开始的变量局部于标签页。

详情见: |tabpage|
多数 GUI 部分由 Yegappan Lakshmanan 实现。


撤销分支						*new-undo-branches*
--------

以前只有单线的撤销-重做。如果撤销一系列改变后进行了一项新改变，所有撤销的改变
就全丢失了。这可能会不小心导致大量工作的丢失。

为此情形，Vim 现在实现了撤销分支机制，使你可以回到任何改变之后的文本，即使曾经
撤销过也没问题。唯一的例外是你到达了 'undolevels' 的限制，这时需要释放撤销信息
以减少内存用量。

要能在撤销分支间游历，按顺序给每个改变编号。命令 |g-| 和 |:earlier| 在时间上往
后退到旧的改变上。而命令 |g+| 和 |:later| 在时间上往前进到新的改变上。

每个改变同时记录时间。":earlier 10m" 回到大约十分钟前的文本。

用 |:undolist| 命令了解存在的撤销分支的大概情况。|:undo| 命令现在接受参数以直
接跳转到该列表的任意位置。用 |changenr()| 函数得到改变号。

现在还没有图形化的改变树显示，导航机制可能不甚简明。


扩展的 Unicode 支持					*new-more-unicode*
-------------------

以前只能显示两个组合用字符。现在限制最高提高到 6 个。用 'maxcombine' 选项可以
设置这个限制。缺省值仍然是 2 个。

|ga| 现在显示所有的组合用字符，而不只是前面两个。

以前只支持 16 位 Unicode 字符的显示，现在可用完整的 32 位字符集。除非编译时手
动关闭这项功能以减少一些内存使用。

模式匹配现在可以搜索单个合成用字符。|patterns-composing|

|8g8| 命令搜索非法的 UTF-8 字节序列。


更多高亮					*new-more-highlighting*
--------

高亮匹配的括号:

在文本上移动时光标如果在括号上，同时高亮匹配的另一个括号。这使用了新的
|CursorMoved| 自动命令事件。

这意味着每次移动光标都会执行一些命令。如果对你来说速度减慢太多，可以关闭: >
	:NoMatchParen

|matchparen| 提供更多信息。

该插件使用 |:match| 命令。现在该命令同时支持三个匹配模式。插件使用的是第三个。
第一个给用户使用，第二个可以用于其它插件。

高亮光标行和列:

加入 'cursorline' 和 'cursorcolumn' 选项。它们高亮光标所在的屏幕行和屏幕列。这
阳方便定位光标位置。'cursorcolumn' 也可用于对齐文本。它们可能会使屏幕刷新慢很
多。它们使用 CursorColumn 和 CursorLine 高亮，你可以修改使用的颜色。
|hl-CursorColumn| |hl-CursorLine|

可用高亮属性的数目从大约 220 个增加到超过 30000 个。这使拼写的属性和语法高亮的
属性可以进行合并。也可用于语法高亮，标注可视区域，CursorColumn 等等。


翻译的手册页						*new-manpage-trans*
------------

现在 Vim 有了若干其它语言的手册页和相关程序。

法语     - David Blanchet 翻译
意大利语 - Antonio Colombo 翻译
俄语     - Vassily Ragosin 翻译
波兰语   - Mikolaj Machowski 翻译

Unix 的 Makefile 在 .../man/it/man1/，.../man/it.ISO8859-1/man1/ 和
.../man/it.UTF-8/man1/ 安装意大利语的手册页。看来没有关于 "it" 目录使用什么编
码的公认标准。作为我们的最佳猜测，目前使用的是 8 位编码文件。
其它语言也被安装在类似的位置。
Vim configure 时如果使用 "--disable-nls"，不自动安装翻译页。但仍然可用
"make install-languages install-tool-languages" 完成这项工作。


内部 grep						*new-vimgrep*
---------

用 ":vimgrep" 命令可以在一组文件里搜索模式。和 ":grep" 命令类似，但它不需要外
部程序。除了移植性更好之外，它还能处理不同的文件编码并使用多行模式。它也能用来
在压缩和远程文件上进行搜索。|:vimgrep|。

如果想在脚本里使用搜索的结果，用 |getqflist()| 函数。

要 grep 多个目录下的文件，可用 "**" 模式。它会扩展为任意深度的目录。任何需要扩
展文件名的地方都可以用 "**"，包括 |:next| 和 |:args|。


消息往回滚动						*new-scroll-back*
------------

显示消息并停在 |more-prompt| 和 |hit-enter-prompt| 时，用 'k'、'g'、'u' 和 'b'
键可以往回滚动到以前的消息。这对 ":syntax"、":autocommand" 和 ":highlight" 的
输出阅读特别有用。使用通用的实现所以支持所有的命令，同时也保持高亮。只有
'more' 选项置位时才能使用。以前，只有 ":clist" 实现了部分这项功能。

如果你在 |hit-enter-prompt| 时按了 <Enter>，用 |g<| 命令可以查看最后一个消息
页。这时你可以继续往回滚动。


光标超越行尾						*new-onemore*
------------

如果 'virtualedit' 选项包含 "onemore"，光标可以移动到刚刚跨越行尾的位置。就像
它在换行符上一样。

这时有些命令的行为更加一致。以前，在空行上的光标总是跨越行尾。但这和 Vi 兼容差
得很远，而且也可能会影响一些插件或 Vim 脚本。小心使用！

Mattias Flodin 提供此补丁。


POSIX 相容性						*new-posix*
------------

使用 POSIX 测试包来验证 POSIX 的相容性。修正了不少问题，使 Vim 和 POSIX 更兼
容。一些改变和传统的 Vi 或期待的行为有冲突。设置 $VIM_POSIX 环境变量得到 POSIX
兼容行为。见 |posix|。

为了 Vi 和 POSIX 的兼容性而修正的项目:
- 用计数重复 "R" 只覆盖文本一次；'cpoptions' 加入 'X' 标志位 |cpo-X|
- 移动到不存在行的垂直移动命令失败；; 'cpoptions' 加入 '-' 标志位 |cpo--|
- 用 preserve 保护文件时并执行 ":q!"，文件可以恢复；'cpoptions' 加入 '&' 标志
  位 |cpo-&|
- 部分实现了 'window' 选项。指定只有一个窗口时  CTRL-F 和 CTRL-B 滚动的幅度。
  现在接受 "-w {number}" 参数。"-w {scriptout}" 里的 {scriptout} 必须不以数位
  开始。
- 接受 "-c{command}" 参数，"-c" 和 {command} 之间没有空格。
- 用 ":w!" 写入文件时不复位 'readonly'，如果 'cpoptions' 里包含 'Z' 的话。
- 接受 ":list"、":print" 和 ":number" 的 'l' 和 '#' 标志位。
- 'cpoptions' 加入 '.' 标志位: 如果缓冲区被修改，":cd" 失败。
- Ex 模式里，空缓冲区使用 ":read file" 不在新行上下保留空行。
- ":global" 命令删除换行符前面的反斜杠。
- ":append"、":insert" 或 ":change" 和 ":global" 一起使用时，从命令中获取插入
  的行。可以用反斜杠-换行符来分隔行。
- 可用 ":global /pat/ visual" 在每个匹配行上执行普通模式命令。"Q" 可以继续并转
  到下一行。
- 部分实现 |:open| 命令。它退出 Ex 模式，但重画整个屏幕，而不是像 open 模式应
  该做的那样，重画一行。
- 支持使用管道读入外部程序的输出和把输入写到外部程序。加入 'shelltemp' 选项和
  has("filterpipe")。
- Ex 安静模式里显示 ":set" 的命令输出。
- 如果以前没用过寄存器，":@@" 和 ":**" 报错。
- 搜索模式 "[]-`]" 匹配 ']'、'^'、'_' 和 '`'。
- ":insert" 的自动缩进使用插入位置下方的行。
- ":change" 的自动缩进使用第一个改变的行。
- Ex 命令行的编辑不用加工 (cooked) 模式，因为这样不能处理 CTRL-D 和 CTRL-T。
- Ex 模式里 "1,3" 显示三行，"%" 显示所有行。
- Ex 模式里 "undo" 会撤销所有从启动 Ex 模式时开始的改变。
- 实现 'prompt' 选项。


调试器支持						*new-debug-support*
----------

加入 'balloonexpr' 选项。这是实现气泡功能的通用机制。用它显示鼠标指针所在单词
的相关信息。


远程文件探索器						*new-netrw-explore*
--------------

netrw 插件现在支持使用 "scp://" 的目录浏览。也可以删除和换名文件。

为了避免大量重复代码，以前的文件探索器插件现在已经和 netrw 插件集成。这意味着
本地和远程的文件浏览现在使用相同的方式。

":browse edit" 和 ":browse split" 在 GUI 对话框不可用而 netrw 插件可用时，使用
该插件。

Charles Campbell 维护 netrw 插件。


定义操作符						*new-define-operator*
----------

以前你不能定义自己的操作符: 即 {motion} 动作后面可以跟随的命令。Vim 7 引入了
'operatorfunc' 选项和 |g@| 操作符。这样就可以定义和操作符行为相同的映射。实际
工作由函数完成，而 |g@| 操作符调用该函数。

|:map-operator| 给出解释和一个示例。


映射到表达式						*new-map-expression*
------------

映射的 {rhs} 参数可以是表达式。这意味着产生的字符可以取决于上下文。例如: >
	:inoremap <expr> . InsertDot()
这里句号并映射到任何 InsertDot() 返回的内容。

这也可用于缩写。详情见 |:map-<expr>|。


可视和选择模式映射					*new-map-select*
------------------

以前的可视模式映射同时适用于可视和选择模式。使用一点技巧可以使选择模式的映射和
可视模式下的行为相同。

现在加入了分别定义可视和选择模式映射的命令: |:xmap| 和 |:smap|，以及配套的
"noremap" 和 "unmap" 命令。

这个改动同样适用于菜单: |:xmenu|、|:smenu| 等等。


位置列表						*new-location-list*
--------

加入了每个窗口分别拥有的 quickfix 列表 (称为位置列表) 的支持。位置列表显示在位
置窗口里 (和 quickfix 窗口类似)。你可以打开多于一个位置列表窗口。也加入了一组
和 quickfix 命令类似的命令，用来浏览位置列表。(Yegappan Lakshmanan)


若干新项目						*new-items-7*
----------

普通模式命令: ~

a"、a' 和 a`		选择引号括起的字符串的新文本对象。|a'|
i"、i' 和 i`		(Taro Muraoka)

CTRL-W <Enter>		quickfix 窗口里: 打开新窗口，显示光标所在错误的位置。

|at| 和 |it| 文本对象选择 HTML 或 XML 标签之间的文本块。

<A-LeftMouse> ('mousemodel' "popup" 或 "popup-setpos")
<A-RightMouse> ('mousemodel' "extend")
			进行面向列块的选择。|<A-LeftMouse>|

gF			开始编辑光标所在的文件名并跳转到文件名后跟随的行号。
			(Yegappan Lakshmanan)

CTRL-W F		在新窗口里开始编辑光标所在的文件名并跳转到文件名后跟随
			的行号。(Yegappan Lakshmanan)

插入模式命令: ~

CTRL-\ CTRL-O		执行普通模式命令。类似于 CTRL-O，但不移动光标。
			|i_CTRL-\_CTRL-O|

选项: ~

'balloonexpr'		用于计算气泡显示文本的表达式
'completefunc'		用户指定的插入模式补全使用的函数名。插入模式下用
			CTRL-X CTRL-U 可以进行任何形式的补全。(Taro Muraoka)
'completeopt'		插入模式补全可以使用弹出菜单。
'cursorcolumn'		高亮光标列
'cursorline'		高亮光标行
'formatexpr'		|gq| 或插入模式下文本超过 'textwidth' 以后的文本排版使
			用的表达式。
'formatlistpat'		排版时识别编号列表的模式。(Hugo Haas 的建议)
'fsync'			写入文件时是否调用 fsync()。(Ciaran McCreesh)
'guitablabel'		GUI 标签页标签用于显示文本的表达式
'guitabtooltip'		GUI 标签页标签用于显示工具提示文本的表达式
'macatsui'		Mac: 用 ATSUI 文本显示函数
'maxcombine'		显示的组合用字符的最大数目
'maxmempattern'		模式匹配使用的最大内存量
'mkspellmem'		|:mkspell| 使用内存的相关参数
'mzquantum'		毫秒计的调度 MzScheme 线程的时间间隔。
'numberwidth'		'number' 选项使用空间的最小宽度。(Emmanuel Renieris)
'omnifunc'		全能补全使用的函数名。
'operatorfunc'		|g@| 操作符使用的函数
'printmbcharset'	:hardcopy 使用的 CJK 字符集
'printmbfont'		:hardcopy 产生的 CJK 输出使用的字体名
'pumheight'		弹出菜单显示的最大项目数
'quoteescape'		字符串内转义引号的字符。用于 a"、a' 和 a` 文本对象。
			|a'|
'shelltemp'		外壳命令使用临时文件还是管道
'showtabline'		是否显示标签页行
'spell'			打开/关闭拼写检查
'spellcapcheck'		定位句子尾部的模式
'spellfile'		加入好词和坏词所用的文件
'spelllang'		拼写检查所用的语言
'spellsuggest'		拼写建议的方法
'synmaxcol'		检查语法项目的最大列数；避免长行的重画过慢
'tabline'		标签页行用于显示文本的表达式
'tabpagemax'		|-p| 打开的最大标签页数
'verbosefile'		记录消息到文件。
'wildoptions'		"tagfile" 值使 CTRL-D 命令行补全可以列出匹配标签所在的
			文件名。(基于 Yegappan Lakshmanan 的意见)
'winfixwidth'		固定宽度的窗口，类似于 'winfixheight'


Ex 命令: ~

Win32: ":winpos" 命令现在支持控制台版本。(Vipin Aravind)

|:startreplace|		开始替换模式。(Charles Campbell)
|:startgreplace| 	开始虚拟替换模式。

|:0file|		删除缓冲区的名字。(Charles Campbell)

|:diffoff|		关闭当前窗口或所有窗口的 diff 模式。

|:delmarks|		删除位置标记。

|:exusage|		Ex 命令的帮助 (Nvi 命令)。

|:viusage|		Vi 命令的帮助 (Nvi 命令)。

|:sort|			给缓冲区的行排序，不依赖外部命令。(部分由 Bryce Wagner
			提供)

|:vimgrep|		内部 grep 命令，在多个文件中搜索模式。
|:vimgrepadd|		类似于 |:vimgrep|，但不建立新列表。

|:caddfile|		加入错误信息到已存在的 quickfix 列表
			(Yegappan Lakshmanan)。
|:cbuffer|		读入缓冲区的错误行。(部分由 Yegappan Lakshmanan 提供)
|:cgetbuffer|		基于缓冲区创建 quickfix 列表，但不跳到第一个错误。
|:caddbuffer|		从当前缓冲区加入错误到 quickfix 列表。
|:cexpr|		从 Vim 表达式读入错误信息 (Yegappan Lakshmanan)。
|:caddexpr|		从 Vim 表达式加入错误信息到已存在的 quickfix 列表
			(Yegappan Lakshmanan)。
|:cgetexpr|		基于 Vim 表达式创建 quickfix 列表，但不跳到第一个错误
			(Yegappan Lakshmanan)。

|:lfile|		类似于 |:cfile| 但使用位置列表。
|:lgetfile|		类似于 |:cgetfile| 但使用位置列表。
|:laddfile|		类似于 |:caddfile| 但使用位置列表。
|:lbuffer|		类似于 |:cbuffer| 但使用位置列表。
|:lgetbuffer|		类似于 |:cgetbuffer| 但使用位置列表。
|:laddbuffer|		类似于 |:caddbuffer| 但使用位置列表。
|:lexpr|		类似于 |:cexpr| 但使用位置列表。
|:lgetexpr|		类似于 |:cgetexpr| 但使用位置列表。
|:laddexpr|		类似于 |:caddexpr| 但使用位置列表。
|:ll|			类似于 |:cc| 但使用位置列表。
|:llist|		类似于 |:clist| 但使用位置列表。
|:lnext|		类似于 |:cnext| 但使用位置列表。
|:lprevious|		类似于 |:cprevious| 但使用位置列表。
|:lNext|		类似于 |:cNext| 但使用位置列表。
|:lfirst|		类似于 |:cfirst| 但使用位置列表。
|:lrewind|		类似于 |:crewind| 但使用位置列表。
|:llast|		类似于 |:clast| 但使用位置列表。
|:lnfile|		类似于 |:cnfile| 但使用位置列表。
|:lpfile|		类似于 |:cpfile| 但使用位置列表。
|:lNfile|		类似于 |:cNfile| 但使用位置列表。
|:lolder|		类似于 |:colder| 但使用位置列表。
|:lnewer|		类似于 |:cnewer| 但使用位置列表。
|:lwindow|		类似于 |:cwindow| 但使用位置列表。
|:lopen|		类似于 |:copen| 但使用位置列表。
|:lclose|		类似于 |:cclose| 但使用位置列表。
|:lmake|		类似于 |:make| 但使用位置列表。
|:lgrep|		类似于 |:grep| 但使用位置列表。
|:lgrepadd|		类似于 |:grepadd| 但使用位置列表。
|:lvimgrep|		类似于 |:vimgrep| 但使用位置列表。
|:lvimgrepadd|		类似于 |:vimgrepadd| 但使用位置列表。
|:lhelpgrep|		类似于 |:helpgrep| 但使用位置列表。
|:lcscope|		类似于 |:cscope| 但使用位置列表。
|:ltag|			跳转到标签，并把匹配的标签加入位置列表。
|:undojoin|		将下一个改变和上一个撤销块合并。
|:undolist|		列出撤销树的叶结点。

|:earlier|		在时间上退到以前的文本改变。
|:later|		在时间上进到以后的文本改变。

|:for|			在 |List| 上循环。
|:endfor|

|:lockvar|		给变量加锁，防止被改变。
|:unlockvar|		给加锁的变量解锁。

|:mkspell|		建立 Vim 拼写文件。
|:spellgood|		增加单词到好词列表。
|:spellwrong|		增加单词到坏词列表。
|:spelldump|		转储好词列表。
|:spellinfo|		显示关于使用的拼写文件的信息。
|:spellrepall|		为整个缓冲区重复某个拼写校正。
|:spellundo|		从好词和坏词列表里删除单词。

|:mzscheme|		执行 MzScheme 命令。
|:mzfile|		执行 MzScheme 脚本文件。

|:nbkey|		把键传递给 NetBeans 进行处理。

|:profile|		用于 Vim 脚本刨视的命令。
|:profdel|		为指定项目停止刨视。

|:smap|			选择模式映射。
|:smapclear|
|:snoremap|
|:sunmap|

|:xmap|			可视模式映射，不用于选择模式。
|:xmapclear|
|:xnoremap|
|:xunmap|

|:smenu|		选择模式菜单。
|:snoremenu|
|:sunmenu|

|:xmenu|		可视模式菜单，不用于选择模式。
|:xnoremenu|
|:xunmenu|

|:tabclose|		关闭当前标签页。
|:tabdo|		为每个标签页执行命令。
|:tabedit|		在新标签页里编辑文件。
|:tabnew|		打开新标签页。
|:tabfind|		搜索文件并在新标签页里打开。
|:tabnext|		转到下一个标签页。
|:tabprevious|		转到前一个标签页。
|:tabNext|		转到前一个标签页。
|:tabfirst|		转到第一个标签页。
|:tabrewind|		转到第一个标签页。
|:tablast|		转到最后一个标签页。
|:tabmove|		把当前标签页移到别处。
|:tabonly|		关闭所有其它标签页。
|:tabs|			列出标签页和它们包含的窗口。


Ex 命令修饰符: ~

|:keepalt|		不改变轮换文件。

|:noautocmd|		不激活自动命令。

|:sandbox|		在沙盘里执行命令。

|:tab|			打开新窗口时，同时建立新标签页。


Ex 命令参数: ~

|++bad|			指定出现不能转换的字符或者非法字节时的行为。(代码示例
			由 Yasuhiro Matsumoto 提供)
			另外，如果出现转换错误或者发现非法字节，错误信息里包含
			行号。


新出现和经过扩充的函数: ~

|add()|			在列表后附加项目
|append()|		附加行列表到缓冲区
|argv()|		没有参数返回整个参数列表
|browsedir()|		选择目录的对话框
|bufnr()|		接受额外参数: 建立缓冲区
|byteidx()|		字符的位置 (Ilya Sher)
|call()|		调用函数，参数以列表出现
|changenr()|		当前改变号
|complete()|		设定插入模式补全的匹配
|complete_add()|	加入用于 'completefunc' 的匹配
|complete_check()|	检察键击，用于 'completefunc'
|copy()|		建立列表或字典的浅备份
|count()|		计算列表或字典里某值的出现次数
|cursor()|		也接受 'virtualedit' 的偏移，而第一个参数可以是列表:
			[lnum, col, off]
|deepcopy()|		建立列表或字典的完整备份
|diff_filler()|		得到行 {lnum} 上方填充行的数目。
|diff_hlID()|		得到 diff 模式高亮标识号
|empty()|		检查列表或字典是否为空
|eval()|		计算 {string} 并返回其结果
|extend()|		为列表/字典附加另一个列表/字典
|feedkeys()|		把若干字符放入预输入缓冲区
|filter()|		删除列表/字典的选定项目
|finddir()|		寻找 'path' 里的目录
|findfile()|		寻找 'path' 里的文件 (Johannes Zellner)
|foldtextresult()|	行 "lnum" 所在关闭折叠的显示用文本
|function()|		得到函数名对应的函数引用
|garbagecollect()|	清理只含循环引用的 |Lists| 和 |Dictionaries|
|get()|			得到列表/字典的项目
|getbufline()|		得到指定缓冲区的行列表 (Yegappan Lakshmanan)
|getcmdtype()|		得到当前命令行的类型 (Yegappan Lakshmanan)
|getfontname()|		得到当前使用的字体名
|getfperm()|		得到文件权限字符串 (Nikolai Weibull)
|getftype()|		得到文件类型 (Nikolai Weibull)
|getline()|		带第二个参数: 得到缓冲区行列表
|getloclist()|		位置列表项目的列表 (Yegappan Lakshmanan)
|getpos()|		得到光标、位置标记等的位置的列表
|getqflist()|		quickfix 错误的列表 (Yegappan Lakshmanan)
|getreg()|		取得寄存器内容
|gettabwinvar()|	取得指定标签页的窗口变量。
|has_key()|		检查某键是否出现在字典里
|hasmapto()|		检查到字符串的映射是否存在
|index()|		列表中某值的索引
|inputlist()|		提示用户从列表选择一项
|insert()|		在列表某处插入一个项目
|islocked()|		检查变量是否加锁
|items()|		得到字典的键-值组对的列表
|join()|		合并列表项目成为字符串
|keys()|		得到字典的键列表
|len()|			列表或字典项目的总数
|map()|			改变每个列表或字典项目
|maparg()|		额外参数: 使用缩写
|mapcheck()|		额外参数: 使用缩写
|match()|		额外参数: 计数
|matcharg()|		返回 |:match| 命令的参数
|matchend()|		额外参数: 计数
|matchlist()|		字符串对模式的匹配和子匹配列表
|matchstr()|		额外参数: 计数
|max()|			列表或字典项目的最大值
|min()|			列表或字典项目的最小值
|mkdir()|		建立目录
|pathshorten()|		把目录名简化到一个字符
|printf()|		格式化文本
|pumvisible()|		检查弹出菜单是否显示
|range()|		产生数字序列的列表
|readfile()|		读入文件到一个行列表
|reltime()|		得到时间值，可能是相对的
|reltimestr()|		把时间值转换为字符串
|remove()|		删除列表或字典里一或多个项目
|repeat()|		重复 "expr" "count" 次 (Christophe Poucet)
|reverse()|		反转列表项目的顺序
|search()|		额外参数:
|searchdecl()|		查找变量的声明
|searchpair()|		额外参数: 停止搜索的行
|searchpairpos()|	返回匹配位置的列表
|searchpos()|		返回匹配位置的列表
|setloclist()|		修改位置列表 (Yegappan Lakshmanan)
|setpos()|		设置光标或位置标记到某位置
|setqflist()|		修改 quickfix 列表 (Yegappan Lakshmanan)
|settabwinvar()|	设置指定标签页的窗口变量
|sort()|		给列表排序
|soundfold()|		返回 "发音相似" 的单词等价形式
|spellbadword()|	返回错误拼写的单词
|spellsuggest()|	返回建议的拼写校正列表
|split()|		分割字符串成为列表
|str2nr()|		把字符串转换为 8、10、16 进制的数值
|stridx()|		额外参数: 开始位置
|strridx()|		额外参数: 开始位置
|string()|		列表或字典的字符串表示形式
|system()|		额外参数: 用外壳命令过滤 {input}
|tabpagebuflist()|	得到标签页里的缓冲区列表
|tabpagenr()|		得到当前或最后一个标签页号
|tabpagewinnr()|	得到标签页里的窗口号
|tagfiles()|		标签文件名的列表
|taglist()|		得到匹配标签的列表 (Yegappan Lakshmanan)
|tr()|			翻译字符 (Ron Aaron)
|values()|		得到列表或字典的值列表
|winnr()|		接受参数: 使用哪个窗口
|winrestview()|		恢复当前窗口的视图
|winsaveview()|		保存当前窗口的视图
|writefile()|		把一个行列表写到文件里

用户定义的函数现在可以从 'runtimepath' 里的 "autoload" 目录自动载入。见
|autoload-functions|。


新 Vim 变量: ~

|v:insertmode|		用于 |InsertEnter| 和 |InsertChange| 自动命令
|v:val|			|map()| 或 |filter()| 函数的项目值
|v:key|			|map()| 或 |filter()| 函数的项目键
|v:profiling|		":profile start" 命令之后非零
|v:fcs_reason|		激活 |FileChangedShell| 的原因
|v:fcs_choice|		|FileChangedShell| 之后应该做什么
|v:beval_bufnr|		'balloonexpr' 的缓冲区号
|v:beval_winnr|		'balloonexpr' 的窗口号
|v:beval_lnum|		'balloonexpr' 的行号
|v:beval_col|		'balloonexpr' 的列号
|v:beval_text|		'balloonexpr' 鼠标指针所在的文本
|v:scrollstart|		屏幕上滚的原因
|v:swapname|		|SwapExists| 事件所用的交换文件名
|v:swapchoice|		交换文件存在时应该做什么
|v:swapcommand|		处理 |SwapExists| 后应该执行的命令
|v:char|		执行 'formatexpr' 时的参数


新自动命令事件: ~

|ColorScheme|		载入色彩方案后

|CursorHoldI|		在插入模式下，用户有一段时间没有按键
|CursorMoved|		普通模式下移动了光标
|CursorMovedI|		插入模式下移动了光标

|FileChangedShellPost|	对在 Vim 外部改变的文件的处理完成后

|InsertEnter|		开始插入或替换模式时
|InsertChange|		出入插入或替换模式时
|InsertLeave|		离开插入或替换模式时

|MenuPopup|		刚要显示弹出菜单前

|QuickFixCmdPre|	执行 :make、:grep 等命令前 (Ciaran McCreesh)
|QuickFixCmdPost|	执行 :make、:grep 等命令后 (Ciaran McCreesh)

|SessionLoadPost|	载入会话文件后。(Yegappan Lakshmanan)

|ShellCmdPost|		执行外壳命令后
|ShellFilterPost|	用外壳命令执行完过滤后

|SourcePre|		执行 Vim 脚本之前

|SpellFileMissing|	使用不存在的拼写文件

|SwapExists|		编辑文件时检测到交换文件已经存在

|TabEnter|		刚进入标签页后
|TabLeave|		刚离开标签页前

|VimResized|		Vim 窗口大小改变后 (Yakov Lerner)


新高亮组: ~

Pmenu			弹出菜单: 普通项目 |hl-Pmenu|
PmenuSel		弹出菜单: 选中项目 |hl-PmenuSel|
PmenuThumb		弹出菜单: 滚动条 |hl-PmenuThumb|
PmenuSbar		弹出菜单: 滚动条的拇指 |hl-PmenuSbar|

TabLine			标签页行，非活动标签页标签 |hl-TabLine|
TabLineSel		标签页行，活动标签页标签 |hl-TabLineSel|
TabLineFill		标签页行，没有标签的地方 |hl-TabLineFill|

SpellBad		拼写错误的单词 |hl-SpellBad|
SpellCap		大小写错误的单词 |hl-SpellCap|
SpellRare		偏僻词 |hl-SpellRare|
SpellLocal		只存在于别的区域的单词 |hl-SpellLocal|

CursorColumn		'cursorcolumn' |hl-CursorColumn|
CursorLine		'cursorline' |hl-CursorLine|

MatchParen		匹配的括号 |pi_paren.txt| |hl-MatchParen|


搜索模式里的新项目: ~
|/\%d| \%d123		匹配十进制指定的字符
|/\]|  [\d123]		同上，用于字符类
|/\%o| \%o103		匹配八进制指定的字符
|/\]|  [\o1o3]		同上，用于字符类
|/\%x| \%x1a		匹配两位十六进制指定的字符
|/\]|  [\x1a]		同上，用于字符类
|/\%u| \%u12ab		匹配四位十六进制指定的字符
|/\]|  [\u12ab]		同上，用于字符类
|/\%U| \%U1234abcd	匹配八位十六进制指定的字符
|/\]|  [\U1234abcd]	同上，用于字符类
			    (以上部分由 Ciaran McCreesh 提供)

|/[[=| [[=a=]]		等价类 (只用于 latin1 字符)
|/[[.| [[.a.]]		排序规则元素 (只能使用单个字符)

|/\%'m|  \%'m		在位置标记 m 处匹配
|/\%<'m| \%<'m		在位置标记 m 之前匹配
|/\%>'m| \%>'m		在位置标记 m 之后匹配
|/\%V|   \%V		在可视区域内匹配

如有空匹配，嵌套的 |/multi| 项目不再是错误。

现在可用 \{0}，匹配前导的匹配原零次。没有用处，只为兼容性而设置。


新语法/缩进/文件类型插件文件: ~

所有缩进设置都从文件类型插件移到了缩进文件。
实现 b:undo_indent 在 'filetype' 设为其它值时撤销缩进设置。

a2ps 语法和文件类型插件文件。(Nikolai Weibull)
ABAB/4 语法文件。(Marius van Wyk)
alsaconf 文件类型插件文件。(Nikolai Weibull)
AppendMatchGroup 文件类型插件文件。(Dave Silvia)
arch 文件类型插件文件。(Nikolai Weibull)
asterisk 和 asteriskvm 语法文件。(Tilghman Lesher)
BDF 文件类型插件文件。(Nikolai Weibull)
BibTeX 缩进文件。(Dorai Sitaram)
BibTeX Bibliography Style 语法文件。(Tim Pope)
BTM 文件类型插件文件。(Bram Moolenaar)
calendar 文件类型插件文件。(Nikolai Weibull)
Changelog 缩进文件。(Nikolai Weibull)
ChordPro 语法文件。(Niels Bo Andersen)
Cmake 缩进和语法文件。(Andy Cedilnik)
conf 文件类型插件文件。(Nikolai Weibull)
context 语法和文件类型插件文件。(Nikolai Weibull)
CRM114 文件类型插件文件。(Nikolai Weibull)
cvs RC 文件类型插件文件。(Nikolai Weibull)
D 缩进文件。(Jason Mills)
Debian Sources.list 语法文件。(Matthijs Mohlmann)
dictconf 和 dictdconf 语法、缩进和文件类型插件文件。(Nikolai Weibull)
diff 文件类型插件文件。(Bram Moolenaar)
dircolors 文件类型插件文件。(Nikolai Weibull)
django 和 htmldjango 语法文件。(Dave Hodder)
doxygen 语法文件。(Michael Geddes)
elinks 文件类型插件文件。(Nikolai Weibull)
eterm 文件类型插件文件。(Nikolai Weibull)
eviews 语法文件。(Vaidotas Zemlys)
fetchmail RC 文件类型插件文件。(Nikolai Weibull)
FlexWiki 语法和文件类型插件文件。(George Reilly)
Generic 缩进文件。(Dave Silvia)
gpg 文件类型插件文件。(Nikolai Weibull)
gretl 语法文件。(Vaidotas Zemlys)
groovy 语法文件。(Alessio Pace)
group 语法和文件类型插件文件。(Nikolai Weibull)
grub 文件类型插件文件。(Nikolai Weibull)
Haskell 文件类型插件文件。(Nikolai Weibull)
help 文件类型插件文件。(Nikolai Weibull)
indent 文件类型插件文件。(Nikolai Weibull)
Javascript 文件类型插件文件。(Bram Moolenaar)
Kconfig 文件类型插件和语法文件。(Nikolai Weibull)
ld 语法、缩进和文件类型插件文件。(Nikolai Weibull)
lftp 文件类型插件文件。(Nikolai Weibull)
libao config 文件类型插件文件。(Nikolai Weibull)
limits 语法和文件类型插件文件。(Nikolai Weibull)
Lisp 缩进文件。(Sergey Khorev)
loginaccess 和 logindefs 语法和文件类型插件文件。(Nikolai Weibull)
m4 文件类型插件文件。(Nikolai Weibull)
mailaliases 语法文件。(Nikolai Weibull)
mailcap 文件类型插件文件。(Nikolai Weibull)
manconf 语法和文件类型插件文件。(Nikolai Weibull)
matlab 文件类型插件文件。(Jake Wasserman)
Maxima 语法文件。(Robert Dodier)
MGL 语法文件。(Gero Kuhlmann)
modconf 文件类型插件文件。(Nikolai Weibull)
mplayer config 文件类型插件文件。(Nikolai Weibull)
Mrxvtrc 语法和文件类型插件文件。(Gautam Iyer)
MuPAD source 语法、缩进和文件类型插件。(Dave Silvia)
mutt RC 文件类型插件文件。(Nikolai Weibull)
nanorc 语法和文件类型插件文件。(Nikolai Weibull)
netrc 文件类型插件文件。(Nikolai Weibull)
pamconf 语法和文件类型插件文件。(Nikolai Weibull)
Pascal 缩进文件。(Neil Carter)
passwd 语法和文件类型插件文件。(Nikolai Weibull)
PHP 编译器插件。(Doug Kearns)
pinfo 文件类型插件文件。(Nikolai Weibull)
plaintex 语法和文件类型插件文件。(Nikolai Weibull，Benji Fisher)
procmail 文件类型插件文件。(Nikolai Weibull)
prolog 文件类型插件文件。(Nikolai Weibull)
protocols 语法和文件类型插件文件。(Nikolai Weibull)
quake 文件类型插件文件。(Nikolai Weibull)
racc 语法和文件类型插件文件。(Nikolai Weibull)
rd 语法文件。(Johannes Ranke)
readline 文件类型插件文件。(Nikolai Weibull)
rhelp 语法文件。(Johannes Ranke)
rnoweb 语法文件。(Johannes Ranke)
Relax NG compact 文件类型插件文件。(Nikolai Weibull)
Scheme 缩进文件。(Sergey Khorev)
screen 文件类型插件文件。(Nikolai Weibull)
sensors 语法和文件类型插件文件。(Nikolai Weibull)
services 语法和文件类型插件文件。(Nikolai Weibull)
setserial 语法和文件类型插件文件。(Nikolai Weibull)
sieve 语法和文件类型插件文件。(Nikolai Weibull)
SiSU 语法文件。(Ralph Amissah)
Sive 语法文件。(Nikolai Weibull)
slp config、reg 和 spi 语法和文件类型插件文件。(Nikolai Weibull)
SML 缩进文件。(Saikat Guha)
SQL anywhere 语法和缩进文件。(David Fishburn)
SQL 缩进文件。
SQL-Informix 语法文件。(Dean L Hill)
SQL: 处理各种不同的变种。(David Fishburn)
sshconfig 文件类型插件文件。(Nikolai Weibull)
Stata 和 SMCL 语法文件。(Jeff Pitblado)
sudoers 文件类型插件文件。(Nikolai Weibull)
sysctl 语法和文件类型插件文件。(Nikolai Weibull)
terminfo 文件类型插件文件。(Nikolai Weibull)
trustees 语法文件。(Nima Talebi)
Vera 语法文件。(David Eggum)
udev config、permissions 和 rules 语法和文件类型插件文件。(Nikolai Weibull)
updatedb 语法和文件类型插件文件。(Nikolai Weibull)
VHDL 缩进文件。(Gerald Lai)
WSML 语法文件。(Thomas Haselwanter)
Xdefaults 文件类型插件文件。(Nikolai Weibull)
XFree86 config 文件类型插件文件。(Nikolai Weibull)
xinetd 语法、缩进和文件类型插件文件。(Nikolai Weibull)
xmodmap 文件类型插件文件。(Nikolai Weibull)
Xquery 语法文件。(Jean-Marc Vanel)
xsd (XML schema) 缩进文件。
YAML 文件类型插件文件。(Nikolai Weibull)
Zsh 文件类型插件文件。(Nikolai Weibull)


新键盘映射表: ~

僧伽罗语 (斯里兰卡) (Harshula Jayasuriya)
TSCII 编码的泰米尔语 (Yegappan Lakshmanan)
cp737 的希腊语 (Panagiotis Louridas)
波兰语-slash (HS6_06)
乌克兰语-jcuken 键盘 (Anatoli Sakhnik)
日语假名 (Edward L. Fo)


新消息翻译: ~

现在也有了 cp1251 的乌克兰语消息。
越南语消息翻译和菜单。(Phan Vinh Thinh)


其它: ~

|:read| 参数现在有了 |++edit| 参数。从而使用检测到的缓冲区的 'fileformat'、
'fileencoding' 和其它选项。同时也修正了压缩文件编辑时不设置这些选项的问题。

为 Sun Studio 10 更新 Netbeans 接口。协议号从 2.2 上到 2.3。(Gordon Prieur)

Mac: 启动时 Vim 会载入 $VIMRUNTIME/macmap.vim 脚本来定义缺省的 command 键的映
射。(多由 by Benji Fisher 提供)

Mac: 加入剪贴板选择区的类型，这样两个 Vim 之间可以共享面向列块、行和字符的选择
区。(Eckehard Berns)
也修正设置 'clipboard' 为 "unnamed" 时 "yyp" 出现的问题。

Mac: GUI 字体选择器。(Peter Cucka)

Mac: 支持多字节字符。(Da Woon Jung)
并不总能工作。如果有文本绘制的问题，可以尝试关闭 'macatsui' 选项。

Mac: 支持非 GUI 版本的 xterm 鼠标。

Mac: 和 Xcode 更好的集成。在 odoc 事件和拖动接收处理程序之后发送 (post) 伪鼠标
释放事件，以解决 Vim 载入文件后不响应的问题。修正一个 "一行之差" 的行号错误。
(Da Woon Jung)

Mac: 从 Finder 启动时改变目录为编辑文件所在的目录或用户主目录。

加入 t_SI 和 t_EI 转义序列以启动和结束插入模式。
用于设置光标形状为条状或块状。没有缺省值，因为 termcap/terminfo 不支持它们。

Motif 上有了 GUI 字体选择器。(Marcin Dalecki)

Motif 有更好的工具栏按钮。(Marcin Dalecki)

Motif 有搜索/替代对话框助记。(Marcin Dalecki)

加入 Marcin Dalecki 提供的若干 Motif 改进。现在我们自己绘制标签内容，使得字体
的处理方式可以通过 Vim 定制，也相对减少了对 X11 字体管理的依赖。

可以定义局部于缓冲区的自动命令。这意味着即使缓冲区没有名字或者没有特定的名字，
也能使用自动命令。见 |autocmd-buflocal|。(Yakov Lerner)

xterm 现在能够识别多数功能键和修饰符的组合。|xterm-modifier-keys|

如果设置 'verbose'，":highlight" 的输出显示高亮项目最近在哪里设置。
如果设置 'verbose'，":map"、":abbreviate"、":command"、":function" 和
":autocmd" 的输出显示它最近在哪里定义。(Yegappan Lakshmanan)

":function /pattern" 列出匹配模式的函数。

"1gd" 和 "gd" 类似，但忽略光标位置之前的 {} 块里的匹配。"1gD" 和 "gD" 也是。

'scrolljump' 可以设为负数，滚动到窗口高度的一个百分比。

加入 |v:scrollstart| 变量，帮助寻找产生 hit-enter 提示的脚本位置。

要能处理待编辑的文件已经被别的 Vim 实例编辑的情形，加入 |SwapExists| 事件。可
以使用 |v:swapname|、|v:swapchoice| 和 |v:swapcommand| 变量。用此事件可以调用
|client-server| 功能，把另一个 Vim 带到前台。
启动 Vim 时如有 "-t tag" 参数，已经有交换文件而用户选择了 "quit" 或 "abort"，
退出 Vim。

撤销现在同时恢复 '< 和 '> 位置标记。"gv" 可以选择改变和撤销之前的相同区域。

编辑 "/" 或 "?" 命令的搜索模式并且置位 'incsearch' 时，可用 CTRL-L 从当前匹配
上加一个字符。CTRL-R CTRL-W 会加入一个单词，但排除已经输入的单词部分。

Ruby 接口: 加入行号方法。(Ryan Paul)

$MYVIMRC 环境变量设为第一个找到的 vimrc 文件。
$MYGVIMRC 环境变量设为第一个找到的 gvimrc 文件。

==============================================================================
改 进							*improvements-7*

":helpgrep" 在模式之后接受语言描述符: "pat@it"。

打印的帮助信息被移到独立的帮助文件。现在这部分篇幅已经不短。

执行 ":!cmd"、":r !cmd" 或 ":w !cmd" 的补全时，寻找 $PATH 里的可执行文件而不是
当前目录的普通文件。

如果使用 ":silent" 并且 Ex 命令使用反向的行范围，自动交换范围的两端而不询问用
户是否需要这么做。

模式匹配的代码从递归函数修改为迭代机制。这样避免了堆栈溢出错误。分配的内存保存
了状态，所以总是可以检测到内存溢出。允许匹配更加复杂的模式，但过程可能很长，所
以期间 Vim 看起来可能像挂起一样。

以前总在沙盘 |sandbox| 里计算一些选项，现在只有从模式行里设置选项或在安全模式
里才会这么做。应用于 'balloonexpr'、'foldexpr'、'foldtext' 和 'includeexpr'。
(Sumner Hayes)

一些命令和表达式可能包含可怕的副作用，比如编辑搜索模式时使用 CTRL-R =，而该表
达式又调用了跳到其它窗口的函数的情况。加入 |textlock| 防止这种情况的发生。

用 ":breakadd here" 和 ":breakdel here" 可以在光标位置设置或删除断点。

现在可以这样定义函数: >
	:exe "func Test()\n ...\n endfunc"

教程进行了更新，使它更容易使用，也增加了一些解释更多重要命令的文本。建议由
Gabriel Zachmann 提供。

Unix: libcall() 失败时，用 dlerror() 得到错误信息并显示。(Johannes Zellner)

Mac 和 Cygwin: 编辑已有的文件时，使文件名使用和编辑文件相同的大小写。因而输入
":e os_UNIX.c" 后文件名会成为 "os_unix.c"。

'listchars' 里加入 "nbsp"。(David Blanchet)

'buftype' 选项加入 "acwrite" 值。适用于无名但引用某个文件的缓冲区，写回时会用
到 BufWriteCmd 自动命令。

Lisp 缩进和括号匹配: (Sergey Khorev)
- 正确识别方括号
- 识别 #\(、#\)、#\[ 和 #\] 为字符常数
- 识别 Lisp 行注释 (分号定界)

match()、matchend() 和 matchstr() 加入 "count" 参数。(Ilya Sher)

winnr() 接受可选的 "$" 或 "#" 参数。(Nikolai Weibull，Yegappan Lakshmanan)

search() 加入 's' 标志位: 如果光标移动，设置 ' 位置标记。(Yegappan Lakshmanan)
search() 加入 'n' 标志位: 不移动光标。(Nikolai Weibull)
search() 加入 'c' 标志位: 接受光标所在的匹配。
search() 加入 'e' 标志位: 移到匹配的尾部。(Benji Fisher)
search() 加入 'p' 标志位: 返回子模式号。(Benji Fisher)
同样适用于 searchpos()、searchpair() 和 searchpairpos()。

search() 和 searchpair() 函数包含附加参数来指定在哪里停止搜索。如果搜索无须走
得太远，这加快了搜索的速度。

gzip 插件解压失败时，给出错误消息但不删除原始文本。这有助于文件有 .gz 扩展名但
实际没有压缩的情形。(Andrew Pimlott)

使用 C、C++ 或 IDL 语法时，可以附加载入 doxygen 语法。(Michael Geddes)

支持设置 'filetype' 和 'syntax' 为 "aaa.bbb"，代表 "aaa" 加上 "bbb" 的文件类型
和语法。

":registers" 命令现在正确显示多字节字符。

VMS: 使用说明提到了可以用斜杠使标志位大写。加入内建的 vt320 终端代码色彩支持。
(Zoltan Arpadffy)

'viminfo' 的 '%' 项目允许设置缓冲区数目的上限。

文件类型的识别: 如果文件看起来像外壳脚本，检查启动 tcl 解释器的 "exec" 命令。
(Alexios Zavras 建议)

支持 utf-8 和 latin9 (iso-8859-15) 的内部转换，这样就算没有 iconv 也可以使用二
合字母。

编辑无名且空白的缓冲区时如果载入会话文件，彻底删除该缓冲区。避免在缓冲区列表里
留下一个不用的缓冲区。

Win32: 如果 libintl.dll 支持 bind_textdomain_codeset()，使用此函数。
(NAKADAIRA Yukihiro)

Win32: Vim 以前不识别 NTFS 文件系统的硬链接。现在当 'backupcopy' 为 "auto" 时
会检测到。同时也修正关于链接的 "file has been changed since reading it" 虚假信
息。

如果 foldtext() 发现删除注释引导符后没有文本，使用折叠的第二行。可用于 C 风格
的 /* */ 注释，其中第一行只包含 "/*"。

两个系统上编辑相同文件时 (例如 Unix 和 MS-Windows)，以前大多不会给出交换文件已
经存在的警告，因为使用的编辑文件名不同 (如 y:\dir\file 和 /home/me/dir/file)。
现在给交换文件加入标志位，指示和编辑文件放在相同的目录。因为不受使用路径的影
响，现在关于是否编辑相同文件的检查可靠得多。

Unix: 通过符号链接编辑文件时，交换文件过去使用符号链接的名字。现在使用实际文件
的名字，这样可以检测到对文件的重复编辑。(Stefano Zacchiroli 和 James Vega 的建
议)

客户-服务器通信现在支持 'encoding'。如果在 Vim 服务器上设置 'encoding' 为
"utf-8" 而从控制台上调用 "vim --remote fname"，"fname" 被从控制台编码转换为
utf-8。这样也允许使用不同 'encoding' 设置的 Vim 之间交换消息。

内部改动: 修改 ga_room 为 ga_maxlen，这样它不需要每次都递增/递减。

如果寄存器为空，不把它保存到 viminfo 文件。

删除 tcltags 脚本，它已经废弃了。

":redir @*>>" 和 ":redir @+>>" 附加到剪贴板。寄存器名后非法字符的检查更严格。
|:redir|

":redir => variable" 和 ":redir =>> variable" 写入或附加到变量。
(Yegappan Lakshmanan) |:redir|

":redir @{a-z}>>" 附加到寄存器 a 到 z。(Yegappan Lakshmanan)

'verbosefile' 选项可以把消息记录到文件。此时不再显示 verbose 消息。也可用
"-V{filename}" 参数记录启动消息。

":let g:" 列出全局变量。
":let b:" 列出缓冲区局部变量。
":let w:" 列出窗口局部变量。
":let v:" 列出 Vim 变量。

stridx() 和 strridx() 函数接受第三个参数，指定从哪里开始搜索。(Yegappan
Lakshmanan)

getreg() 函数接受额外的一个参数，从而得到 '=' 寄存器表达式本身而不是它计算之后
的值。

setline() 函数接受列表参数以设置多行。如果行号刚刚在末行之后，附加行。

如果字符数和字节数不同的话，g CTRL-G 同时显示字符数。

":debug" 和 '=' 寄存器表达式的补全。跳过行范围和命令名之间的 ":"。
(Peter winters)

插入模式的 CTRL-Q 现在缺省同 CTRL-V。过去它被忽略。

如果 'debug' 包含 "beep"，发出铃声的函数或脚本会给出消息并包括错误源。

补全缓冲区名时，用 "\(^\|[\/]\)" 而不是 "^" 进行匹配，这样 ":buf stor<Tab>"
能同时找到 "include/storage.h" 和 "storage/main.c"。

要计算 (模式匹配) 的项目数而不修改缓冲区，可用 |:substitute| 的 'n' 标志位。见
|count-items|。

|:substitute| 命令的 \u、\U、\l 和 \L 项目现在支持多字节字符。

识别名为 "screen.linux" 的 $TERM 以设置 'background' 的缺省值为 "dark"。
(Ciaran McCreesh)  "cygwin" 和 "putty" 也是如此。

|FileChangedShell| 自动命令事件现在使用 |v:fcs_reason| 变量来指定激活事件的原
因。|v:fcs_choice| 可以选择重新载入缓冲区或询问用户应该如何进行。

xterm 功能键过去不能识别所有的修饰符。现在终端代码可用 ";*X" 或 "O*X" 结尾，其
中 X 是任何字符而 * 代表修饰符代码。
加入 <xUp>、<xDown>、<xLeft> 和 <xRight> 键以识别 xterm 发送这些代码的两种可能
形式，同时仍然可以处理所有的修饰符。

getwinvar() 现在也可以从指定窗口取得局部于缓冲区的选项。

'errorformat' 加入 "%s" 项目。(Yegappan Lakshmanan)
'errorformat' 加入 "%>" 项目。

'errorformat' 过去不能使用包含出现在 "%f" 之后的字符的文件名。例如，"%f:%l:%m"
里文件名不能包含 ":"。现在必须余下的模式匹配以后才会包含第一个 ":"。在这个例子
里，文件名可以包含后面没有行号的 ":"。(Emanuele Giaquinta 建议)

GTK GUI: 如果可能，使用 GTK 文件对话框。Grahame Bowland 和 Evan Webb 补丁的混
合。

bugreport.vim 加入 ":scriptnames"，这样可以看到使用了哪些插件。

Win32: 如果用户改变了滚轮点击滚动行数的设置，立即使用。过去 Vim 需要重启。

在表达式里使用 @= 时，值是 @= 包含的内容。用 ":let @= = value" 可以设置寄存器
内容。

":popup" 可以加上 !，使弹出菜单出现在鼠标指针的位置而不是文本光标的位置。

扩充了编码表，支持许多 MS-Windows 代码页，如 cp1250 和 cp737。这样 Unix 就可以
直接使用它们而无需在前面加上 "8bit-"。
如果编码名以 "microsoft-cp" 开始，忽略 "microsoft-" 部分。

用户定义的命令加入 "customlist" 补全参数。用户定义的补全参数应该返回 Vim 列表
形式的补全的候选值，Vim 不过滤返回值。(Yegappan Lakshmanan)

Win32: 如果 common controls 支持，气泡可以多行。(Sergey Khorev)

命令行补全现在对各种类型参数的匹配结果进行排序: 用户命令、变量、语法名等。

如果不设置 locale，使用 "C" locale。Vim 会处理 latin1 字符并使用自己的
isupper()/toupper()/等函数。

rxvt 终端模拟器用 COLORFGBG 环境变量来猜测 'background' 的值。
(Ciaran McCreesh)

同时支持 Unix 上 t_SI 和 t_EI 的正常功能。(Ciaran McCreesh)

如果 'foldcolumn' 为 1，放入尽量多的信息。鼠标点击 '-' 可以关闭折叠。

input() 接受可选的补全参数，指定输入能接受的补全类型。(Yegappan Lakshmanan)

diff 模式下，"dp" 可接受多于两个缓冲区，如果只有一个置位 'modifiable' 的话。

'diffopt' 选项有三个新值: "horizontal"、"vertical" 和 "foldcolumn"。

如果 'include' 选项包含 \zs，找到的文件名是 \zs 到模式结束处或 \ze。这样可以给
'includeexpr' 传递更多的信息。

现在，在启动过程的插件载入时支持 plugin 目录下的子目录。|load-plugins|

foldcolumn 总是为关闭折叠显示 '+'，方便打开。这可能覆盖其它字符，'foldcolumn'
为 1 尤其如此。

现在置位 'readonly' 可以再次得到 W10 消息。如果 FileChangedRO 自动命令获得文件
失败，可以利用这一点。

Unix: open() 返回 EFBIG 时会给出合适的信息。

":mksession" 设置 SessionLoad 变量以通知插件。会话文件也加入了模式行来设置
'filetype' 为 "vim"。

ATTENTION 提示把 "Delete it" 选择放在 "Quit" 之前，这样更合逻辑。(Robert Webb)

附加到文件而缓冲区没有名字时，过去使用附加文件的名字作为缓冲区名。但是缓冲区的
内容实际和文件内容不同。现在不设置文件名，除非 'cpoptions' 包含 'P' 标志位。

开始编辑新文件而文件所在的目录不存在时，Vim 会报告 "[New DIRECTORY]" 而不是
"[New File]"，从而提示用户可能出现了错误。

Win32: 保持 viminfo 文件的隐藏属性。

过去用了 CTRL-O 和光标键后，插入模式下的 CTRL-A 会记不住最近插入的文本。现在
CTRL-O 之后的那个命令如果不插入文本，最近插入的文本会被记住。这样，CTRL-O 命令
可以移动光标而不用担心会丢失最近插入的文本。

exists() 函数现在提供对自动命令组是否定义和自动命令事件是否支持的检查。
(Yegappan Lakshmanan)

允许在沙盘里使用 ":global"，因为它本身不会造成任何伤害。

如果 'filetype' 为空，":saveas asdf.c" 会设置它为 c。":w asdf.c" 如果会设置缓
冲区的文件名，也是如此。

插入模式的整行补全现在同时搜索未载入的缓冲区。

colortest.vim 脚本现在可以用 ":source" 或 ":runtime syntax/colortest.vim" 直接
调用。

'statusline' 选项可以局部于窗口，这样每个窗口就可以有不同的值。(部分由
Yegappan Lakshmanan 提供)

现在，'statusline' 和其它支持相同格式的选项可以使用新特性:
- 如果以 "%!" 开始，先作为表达式计算该值，然后再对计算结果进行分析。
- 用 "%#HLname#" 开始名为 HLname 的高亮。

如果 'statusline' 设定的值产生了错误信息，它被清空以免出现无限重画循环。其它一
些选项，如 'tabline' 和 'titlestring'，也是如此。":verbose set statusline" 会
提到该选项的设置位置在错误处理程序里。

如果有若干匹配的标签，":tag <name>" 和 CTRL-] 命令跳转到第 [count] 个匹配的标
签。(Yegappan Lakshmanan)

Win32: 如果设置的话，安装程序生成的批处理文件使用 $VIMRUNTIME 或 $VIM。Mathias
Michaelis 提供了示例。
同时新建 vimtutor.bat 批处理文件。

'balloonexpr' 选项现在变成了 |global-local|类型。

system() 函数现在运行于加工 (cooked) 模式，从而可以用 CTRL-C 中断。

==============================================================================
编 译 时 的 改 变					*compile-changes-7*

放弃对 BeOS 和 Amiga GUI 的支持。没有人维护，可能也已经无法工作。如果你想做:
获取 Vim 6.x 版本并重新把你的工作合并进来。

运行测试时，如果其中一个失败而不能生成 "test.out"，其余的测试继续运行。如果有
内存溢出的情况，这么做会有帮助。

编译时定义 EXITFREE 并且带上 ccmalloc 库可来检测内存泄漏。有些内存总是报告为泄
漏，例如 X11 库函数分配的和 alloc_cmdbuff() 分配用于保存 ":quit" 命令的内存。

打印代码移到 src/hardcopy.c。

main() 的一些代码移到独立的若干函数，这使得操作更清晰。这些函数也使用结构来避
免过多的参数。

unix_expandpath() 移到 misc1.c，这使得 os_mac.c 也可以使用它而无须复制代码。

--- Mac ---

"make" 现在建立 Vim.app 目录，而 "make install" 把它复制到最终的目标位置。
(Raf)

运行时目录不直接放在 Vim.app，而放在 Vim.app/Contents/Resources/vim，这样做遵
从了 Mac 的规范。

编译时可以不用任何修改就加入 Motif、Athena 或 GTK 支持，而且仍然可用 MacRoman
转换。加入 os_mac_conv.c 文件。

运行 "make install" 时，像 Unix 那样安装运行时文件，以免复制过多文件。
运行 "make" 时建立到运行时文件的链接，以免递归复制需要太多时间。

configure 尝试同时编译 Intel 和 PowerPC 的 Vim。configure 参数 --with-mac-arch
可以改变这一点。

--- Win32 ---

调整 Make_mvc.mak 文件，使它可用于最新的 MS 编译器，包括 Visual Studio 2005
的免费版本。(George Reilly)

INSTALLpc.txt 进行更新，以包含最近的改变。(George Reilly)

现在用免费的 Visual C++ Toolkit 2003 和其它免费 SDK 工具生成发布的可执行文件。
加入 msvcsetup.bat，提供这方面的支持。

也生成 .pdb 文件，可用于生成 MS-Windows 上有用的崩溃报告。(George Reilly)

==============================================================================
漏 洞 修 正						*bug-fixes-7*

When using PostScript printing on MS-DOS the default 'printexpr' used "lpr"
instead of "copy".  When 'printdevice' was empty the copy command did not
work.  Use "LPT1" then.

The GTK font dialog uses a font size zero when the font name doesn't include a
size.  Use a default size of 10.

This example in the documentation didn't work:
    :e `=foo . ".c" `
Skip over the expression in `=expr` when looking for comments, |, % and #.

When ":helpgrep" doesn't find anything there is no error message.

"L" and "H" did not take closed folds into account.

Win32: The "-P title" argument stopped at the first title that matched, even
when it doesn't support MDI.

Mac GUI: CTRL-^ and CTRL-@ did not work.

"2daw" on "word." at the end of a line didn't include the preceding white
space.

Win32: Using FindExecutable() doesn't work to find a program.  Use
SearchPath() instead.  For executable() use $PATHEXT when the program searched
for doesn't have an extension.

When 'virtualedit' is set, moving the cursor up after appending a character
may move it to a different column.  Was caused by auto-formatting moving the
cursor and not putting it back where it was.

When indent was added automatically and then moving the cursor, the indent was
not deleted (like when pressing ESC).  The "I" flag in 'cpoptions' can be used
to make it work the old way.

When opening a command-line window, 'textwidth' gets set to 78 by the Vim
filetype plugin.  Reset 'textwidth' to 0 to avoid lines are broken.

After using cursor(line, col) moving up/down doesn't keep the same column.

Win32: Borland C before 5.5 requires using ".u." for LowPart and HighPart
fields. (Walter Briscoe)

On Sinix SYS_NMLN isn't always defined.  Define it ourselves. (Cristiano De
Michele)

Printing with PostScript may keep the printer waiting for more.  Append a
CTRL-D to the printer output. (Mike Williams)

When converting a string with a hex or octal number the leading '-' was
ignored.  ":echo '-05' + 0" resulted in 5 instead of -5.

Using "@:" to repeat a command line didn't work when it contains control
characters.  Also remove "'<,'>" when in Visual mode to avoid that it appears
twice.

When using file completion for a user command, it would not expand environment
variables like for a regular command with a file argument.

'cindent': When the argument of a #define looks like a C++ class the next line
is indented too much.

When 'comments' includes multi-byte characters inserting the middle part and
alignment may go wrong.  'cindent' also suffers from this for right-aligned
items.

Win32: when 'encoding' is set to "utf-8" getenv() still returns strings in the
active codepage.  Convert to utf-8.  Also for $HOME.

The default for 'helplang' was "zh" for both "zh_cn" and "zh_tw".  Now use
"cn" or "tw" as intended.

When 'bin' is set and 'eol' is not set then line2byte() added the line break
after the last line while it's not there.

Using foldlevel() in a WinEnter autocommand may not work.  Noticed when
resizing the GUI shell upon startup.

Python: Using buffer.append(f.readlines()) didn't work.  Allow appending a
string with a trailing newline.  The newline is ignored.

When using the ":saveas f2" command for buffer "f1", the Buffers menu would
contain "f2" twice, one of them leading to "f1".  Also trigger the BufFilePre
and BufFilePost events for the alternate buffer that gets the old name.

strridx() did not work well when the needle is empty. (Ciaran McCreesh)

GTK: Avoid a potential hang in gui_mch_wait_for_chars() when input arrives
just before it is invoked

VMS: Occasionally CR characters were inserted in the file.  Expansion of
environment variables was not correct. (Zoltan Arpadffy)

UTF-8: When 'delcombine' is set "dw" only deleted the last combining character
from the first character of the word.

When using ":sball" in an autocommand only the filetype in one buffer was
detected.  Reset did_filetype in enter_buffer().

When using ":argdo" and the window already was at the first argument index,
but not actually editing it, the current buffer would be used instead.

When ":next dir/*" includes many matches, adding the names to the argument
list may take an awful lot of time and can't be interrupted.  Allow
interrupting this.

When editing a file that was already loaded in a buffer, modelines were not
used.  Now window-local options in the modeline are set.  Buffer-local options
and global options remain unmodified.

Win32: When 'encoding' is set to "utf-8" in the vimrc file, files from the
command line with non-ASCII characters are not used correctly.  Recode the
file names when 'encoding' is set, using the Unicode command line.

Win32 console: When the default for 'encoding' ends up to be "latin1", the
default value of 'isprint' was wrong.

When an error message is given while waiting for a character (e.g., when an
xterm reports the number of colors), the hit-enter prompt overwrote the last
line.  Don't reset msg_didout in normal_cmd() for K_IGNORE.

Mac GUI: Shift-Tab didn't work.

When defining tooltip text, don't translate terminal codes, since it's not
going to be used like a command.

GTK 2: Check the tooltip text for valid utf-8 characters to avoid getting a
GTK error.  Invalid characters may appear when 'encoding' is changed.

GTK 2: Add a safety check for invalid utf-8 sequences, they can crash pango.

Win32: When 'encoding' is changed while starting up, use the Unicode command
line to convert the file arguments to 'encoding'.  Both for the GUI and the
console version.

Win32 GUI: latin9 text (iso-8859-15) was not displayed correctly, because
there is no codepage for latin9.  Do our own conversion from latin9 to UCS2.

When two versions of GTK+ 2 are installed it was possible to use the header
files from one and the library from the other.  Use GTK_LIBDIR to put the
directory for the library early in the link flags.

With the GUI find/replace dialog a replace only worked if the pattern was
literal text.  Now it works for any pattern.

When 'equalalways' is set and 'eadirection' is "hor", ":quit" would still
cause equalizing window heights in the vertical direction.

When ":emenu" is used in a startup script the command was put in the typeahead
buffer, causing a prompt for the crypt key to be messed up.

Mac OS/X: The default for 'isprint' included characters 128-160, causes
problems for Terminal.app.

When a syntax item with "containedin" is used, it may match in the start or
end of a region with a matchgroup, while this doesn't happen for a "contains"
argument.

When a transparent syntax items matches in another item where the highlighting
has already stopped (because of a he= argument), the highlighting would come
back.

When cscope is used to set the quickfix error list, it didn't get set if there
was only one match. (Sergey Khorev)

When 'confirm' is set and using ":bdel" in a modified buffer, then selecting
"cancel", would still give an error message.

The PopUp menu items that started Visual mode didn't work when not in Normal
mode.  Switching between selecting a word and a line was not possible.

Win32: The keypad decimal point always resulted in a '.', while on some
keyboards it's a ','.  Use MapVirtualKey(VK_DECIMAL, 2).

Removed unused function DisplayCompStringOpaque() from gui_w32.c

In Visual mode there is not always an indication whether the line break is
selected or not.  Highlight the character after the line when the line break
is included, e.g., after "v$o".

GTK: The <F10> key can't be mapped, it selects the menu.  Disable that with a
GTK setting and do select the menu when <F10> isn't mapped. (David Necas)

After "Y" '[ and '] were not at start/end of the yanked text.

When a telnet connection is dropped Vim preserves files and exits.  While
doing that a SIGHUP may arrive and disturbe us, thus ignore it. (Scott
Anderson)  Also postpone SIGHUP, SIGQUIT and SIGTERM until it's safe to
handle.  Added handle_signal().

When completing a file name on the command line backslashes are required for
white space.  Was only done for a space, not for a Tab.

When configure could not find a terminal library, compiling continued for a
long time before reporting the problem.  Added a configure check for tgetent()
being found in a library.

When the cursor is on the first char of the last line a ":g/pat/s///" command
may cause the cursor to be displayed below the text.

Win32: Editing a file with non-ASCII characters doesn't work when 'encoding'
is "utf-8".  use _wfullpath() instead of _fullpath(). (Yu-sung Moon)

When recovering the 'fileformat' and 'fileencoding' were taken from the
original file instead of from the swapfile.  When the file didn't exist, was
empty or the option was changed (e.g., with ":e ++fenc=cp123 file") it could
be wrong.  Now store 'fileformat' and 'fileencoding' in the swapfile and use
the values when recovering.

":bufdo g/something/p" overwrites each last printed text line with the file
message for the next buffer.  Temporarily clear 'shortmess' to avoid that.

Win32: Cannot edit a file starting with # with --remote.  Do escape % and #
when building the ":drop" command.

A comment or | just after a expresion-backtick argument was not recognized.
E.g. in :e `="foo"`"comment.

"(" does not stop at an empty sentence (single dot and white space) while ")"
does.  Also breaks "das" on that dot.

When doing "yy" with the cursor on a TAB the ruler could be wrong and "k"
moved the cursor to another column.

When 'commentstring' is '"%s' and there is a double quote in the line a double
quote before the fold marker isn't removed in the text displayed for a  closed
fold.

In Visual mode, when 'bin' and 'eol' set, g CTRL-G counted the last line
break, resulting in "selected 202 of 201 bytes".

Motif: fonts were not used for dialog components. (Marcin Dalecki)

Motif: After using a toolbar button the keyboard focus would be on the toolbar
(Lesstif problem). (Marcin Dalecki)

When using "y<C-V>`x" where mark x is in the first column, the last line was
not included.

Not all test scripts work properly on MS-Windows when checked out from CVS.
Use a Vim command to fix all fileformats to dos before executing the tests.

When using ":new" and the file fits in the window, lines could still be above
the window.  Now remove empty lines instead of keeping the relative position.

Cmdline completion didn't work after ":let var1 var<Tab>".

When using ":startinsert" or ":startreplace" when already in Insert mode
(possible when using CTRL-R =), pressing Esc would directly restart Insert
mode. (Peter Winters)

"2daw" didn't work at end of file if the last word is a single character.

Completion for ":next a'<Tab>" put a backslash before single quote, but it was
not removed when editing a file.  Now halve backslashes in save_patterns().
Also fix expanding a file name with the shell that contains "\'".

When doing "1,6d|put" only "fewer lines" was reported.  Now a following "more
lines" overwrites the message.

Configure could not handle "-Dfoo=long\ long" in the TCL config output.

When searching backwards, using a pattern that matches a newline and uses \zs
after that, didn't find a match.  Could also get a hang or end up in the right
column in the wrong line.

When $LANG is "sl" for slovenian, the slovak menu was used, since "slovak"
starts with "sl".

When 'paste' is set in the GUI the Paste toolbar button doesn't work.  Clear
'paste' when starting the GUI.

A message about a wrong viminfo line included the trailing NL.

When 'paste' is set in the GUI the toolbar button doesn't work in Insert mode.
Use ":exe" in menu.vim to avoid duplicating the commands, instead of using a
mapping.

Treat "mlterm" as an xterm-like terminal. (Seiichi Sato)

":z.4" and ":z=4" didn't work Vi compatible.

When sourcing a file, editing it and sourcing it again, it could appear twice
in ":scriptnames" and get a new <SID>, because the inode has changed.

When $SHELL is set but empty the 'shell' option would be empty.  Don't use an
empty $SHELL value.

A command "w! file" in .vimrc or $EXINIT didn't work.  Now it writes an empty
file.

When a CTRL-F command at the end of the file failed, the cursor was still
moved to the start of the line.  Now it remains where it is.

When using ":s" or "&" to repeat the last substitute and "$" was used to put
the cursor in the last column, put the cursor in the last column again.  This
is Vi compatible.

Vim is not fully POSIX compliant but sticks with traditional Vi behavior.
Added a few flags in 'cpoptions' to behave the POSIX way when wanted.  The
$VIM_POSIX environment variable is checked to set the default.

Appending to a register didn't insert a line break like Vi.  Added the '>'
flag to 'cpoptions' for this.

Using "I" in a line with only blanks appended to the line.  This is not Vi
compatible.  Added the 'H' flag in 'coptions' for this.

When joining multiple lines the cursor would be at the last joint, but Vi
leaves it at the position where "J" would put it.  Added the 'q' flag in
'cpoptions' for this.

Autoindent didn't work for ":insert" and ":append".

Using ":append" in an empty buffer kept the dummy line.  Now it's deleted to
be Vi compatible.

When reading commands from a file and stdout goes to a terminal, would still
request the xterm version.  Vim can't read it, thus the output went to the
shell and caused trouble there.

When redirecting to a register with an invalid name the redirection would
still be done (after an error message).  Now reset "redir_reg". (Yegappan
Lakshmanan)

It was not possible to use a NL after a backslash in Ex mode.  This is
sometimes used to feed multiple lines to a shell command.

When 'cmdheight' is set to 2 in .vimrc and the GUI uses the number of lines
from the terminal we actually get 3 lines for the cmdline in gvim.

When setting $HOME allocated memory would leak.

Win32: bold characters may sometimes write in another character cell.  Use
unicodepdy[] as for UTF-8. (Taro Muraoka)

":w fname" didn't work for files with 'buftype' set to "nofile".

The method used to locate user commands for completion differed from when they
are executed.  Abiguous command names were not completed properly.

Incremental search may cause a crash when there is a custom statusline that
indirectly invokes ":normal".

Diff mode failed when $DIFF_OPTIONS was set in the environment.  Unset it
before invoking "diff".

Completion didn't work after ":argdo", ":windo" and ":bufdo".  Also for ":set
&l:opt" and ":set &g:opt". (Peter Winters)

When setting 'ttymouse' to "dec" in an xterm that supports the DEC mouse
locator it doesn't work.  Now switch off the mouse before selecting another
mouse model.

When the CursorHold event is triggered and the commands peek for typed
characters the typeahead buffer may be messed up, e.g., when a mouse-up event
is received.  Avoid invoking the autocommands from the function waiting for a
character, let it put K_CURSORHOLD in the input buffer.

Removed the "COUNT" flag from ":argadd", to avoid ":argadd 1*" to be used like
":1argadd *".  Same for ":argdelete" and ":argedit".

Avoid that $LANG is used for the menus when LC_MESSAGES is "en_US".

Added backslashes before dashes in the vim.1 manual page to make the appear as
real dashes. (Pierr Habouzit)

Where "gq" left the cursor depended on the value of 'formatprg'.  Now "gq"
always leaves the cursor at the last line of the formatted text.

When editing a compressed file, such as "changelog.Debian.gz" file, filetype
detection may try to check the contents of the file while it's still
compressed.  Skip setting 'filetype' for compressed files until they have been
decompressed.  Required for patterns that end in a "*".

Starting with an argument "+cmd" or "-S script" causes the cursor the be moved
to the first line.  That breaks a BufReadPost autocommand that uses g`".
Don't move the cursor if it's somewhere past the first line.

"gg=G" while 'modifiable' is off was uninterruptable.

When 'encoding' is "sjis" inserting CTRL-V u d800 a few times causes a crash.
Don't insert a DBCS character with a NUL second byte.

In Insert mode CTRL-O <Home> didn't move the cursor.  Made "ins_at_eol" global
and reset it in nv_home().

Wildcard expansion failed: ":w /tmp/$$.`echo test`".  Don't put quotes around
spaces inside backticks.

After this sequence of commands: Y V p gv: the wrong line is selected.  Now
let "gv" select the text that was put, since the original text is deleted.
This should be the most useful thing to do.

":sleep 100u" sleeps for 100 seconds, not 100 usec as one might expect.  Give
an error message when the argument isn't recognized.

In gui_mch_draw_string() in gui_w32.c "unibuflen" wasn't static, resulting in
reallocating the buffer every time. (Alexei Alexandrov)

When using a Python "atexit" function it was not invoked when Vim exits.  Now
call Py_Finalize() for that. (Ugo Di Girolamo)
This breaks the thread stuff though, fixed by Ugo.

GTK GUI: using a .vimrc with "set cmdheight=2 lines=43" and ":split" right
after startup, the window layout is messed up. (Michael Schaap)  Added
win_new_shellsize() call in gui_init() to fix the topframe size.

Trick to get ...MOUSE_NM not used when there are vertical splits.  Now pass
column -1 for the left most window and add MOUSE_COLOFF for others.  Limits
mouse column to 10000.

searchpair() may hang when the end pattern has "\zs" at the end.  Check that
we find the same position again and advance one character.

When in diff mode and making a change that causes the "changed" highlighting
to disappear or reappear, it was still highlighted in another window.

When a ":next" command fails because the user selects "Abort" at the ATTENTION
prompt the argument index was advanced anyway.

When "~" is in 'iskeyword' the "gd" doesn't work, it's used for the previous
substitute pattern.  Put "\V" in the pattern to avoid that.

Use of sprintf() sometimes didn't check properly for buffer overflow.  Also
when using smsg().  Included code for snprintf() to avoid having to do size
checks where invoking them

":help \=<Tab>" didn't find "sub-replace-\=".  Wild menu for help tags didn't
show backslashes.  ":he :s\=" didn't work.

When reading an errorfile "~/" in a file name was not expanded.

GTK GUI: When adding a scrollbar (e.g. when using ":vsplit") in a script or
removing it the window size may change.  GTK sends us resize events when we
change the window size ourselves, but they may come at an unexpected moment.
Peek for a character to get any window resize events and fix 'columns' and
'lines' to undo this.

When using the GTK plug mechanism, resizing and focus was not working
properly. (Neil Bird)

After deleting files from the argument list a session file generated with
":mksession" may contain invalid ":next" commands.

When 'shortmess' is empty and 'keymap' set to accents, in Insert mode CTRL-N
may cause the hit-enter prompt.  Typing 'a then didn't result in the accented
character.  Put the character typed at the prompt back in the typeahead buffer
so that mapping is done in the right mode.

setbufvar() and setwinvar() did not give error messages.

It was possible to set a variable with an illegal name, e.g. with setbufvar().
It was possible to define a function with illegal name, e.t. ":func F{-1}()"

CTRL-W F and "gf" didn't use the same method to get the file name.

When reporting a conversion error the line number of the last error could be
given.  Now report the first encountered error.

When using ":e ++enc=name file" and iconv() was used for conversion an error
caused a fall-back to no conversion.  Now replace a character with '?' and
continue.

When opening a new buffer the local value of 'bomb' was not initialized from
the global value.

Win32: When using the "Edit with Vim" entry the file name was limited to about
200 characters.

When using command line completion for ":e *foo" and the file "+foo" exists
the resulting command ":e +foo" doesn't work.  Now insert a backslash: ":e
\+foo".

When the translation of "-- More --" was not 10 characters long the following
message would be in the wrong position.

At the more-prompt the last character in the last line wasn't drawn.

When deleting non-existing text while 'virtualedit' is set the '[ and '] marks
were not set.

Win32: Could not use "**/" in 'path', it had to be "**\".

The search pattern "\n" did not match at the end of the last line.

Searching for a pattern backwards, starting on the NUL at the end of the line
and 'encoding' is "utf-8" would match the pattern just before it incorrectly.
Affected searchpair('/\*', '', '\*/').

For the Find/Replace dialog it was possible that not finding the text resulted
in an error message while redrawing, which cleared the syntax highlighting
while it was being used, resulting in a crash.  Now don't clear syntax
highlighting, disable it with b_syn_error.

Win32: Combining UTF-8 characters were drawn on the previous character.
Could be noticed with a Thai font.

Output of ":function" could leave some of the typed text behind. (Yegappan
Lakshmanan)

When the command line history has only a few lines the command line window
would be opened with these lines above the first window line.

When using a command line window for search strings ":qa" would result in
searching for "qa" instead of quitting all windows.

GUI: When scrolling with the scrollbar and there is a line that doesn't fit
redrawing may fail.  Make sure w_skipcol is valid before redrawing.

Limit the values of 'columns' and 'lines' to avoid an overflow in Rows *
Columns.  Fixed bad effects when running out of memory (command line would be
reversed, ":qa!" resulted in ":!aq").

Motif: "gvim -iconic" opened the window anyway.  (David Harrison)

There is a tiny chance that a symlink gets created between checking for an
existing file and creating a file.  Use the O_NOFOLLOW for open() if it's
available.

In an empty line "ix<CTRL-O>0" moved the cursor to after the line instead of
sticking to the first column.

When using ":wq" and a BufWriteCmd autocmd uses inputsecret() the text was
echoed anyway.  Set terminal to raw mode in getcmdline().

Unix: ":w a;b~c" caused an error in expanding wildcards.

When appending to a file with ":w >>fname" in a buffer without a name, causing
the buffer to use "fname", the modified flag was reset.

When appending to to current file the "not edited" flag would be reset.
":w" would overwrite the file accidentally.

Unix: When filtering text with an external command Vim would still read input,
causing text typed for the command (e.g., a password) to be eaten and echoed.
Don't read input when the terminal is in cooked mode.

The Cygwin version of xxd used CR/LF line separators. (Corinna Vinschen)

Unix: When filtering text through a shell command some resulting text may be
dropped.  Now after detecting that the child has exited try reading some more
of its output.

When inside input(), using "CTRL-R =" and the expression throws an exception
the command line was not abandoned but it wasn't used either.  Now abandon
typing the command line.

'delcombine' was also used in Visual and Select mode and for commands like
"cl".  That was illogical and has been disabled.

When recording while a CursorHold autocommand was defined special keys would
appear in the register.  Now the CursorHold event is not triggered while
recording.

Unix: the src/configure script used ${srcdir-.}, not all shells understand
that.  Use ${srcdir:-.} instead.

When editing file "a" which is a symlink to file "b" that doesn't exist,
writing file "a" to create "b" and then ":split b" resulted in two buffers on
the same file with two different swapfile names.  Now set the inode in the
buffer when creating a new file.

When 'esckeys' is not set don't send the xterm code to request the version
string, because it may cause trouble in Insert mode.

When evaluating an expression for CTRL-R = on the command line it was possible
to call a function that opens a new window, resulting in errors for
incremental search, and many other nasty things were possible.  Now use the
|textlock| to disallow changing the buffer or jumping to another window
to protect from unexpected behavior.  Same for CTRL-\ e.

"d(" deleted the character under the cursor, while the documentation specified
an exclusive motion.  Vi also doesn't delete the character under the cursor.

Shift-Insert in Insert mode could put the cursor before the last character
when it just fits in the window.  In coladvance() don't stop at the window
edge when filling with spaces and when in Insert mode.  In mswin.vim avoid
getting a beep from the "l" command.

Win32 GUI: When Alt-F4 is used to close the window and Cancel is selected in
the dialog then Vim would insert <M-F4> in the text.  Now it's ignored.

When ":silent! {cmd}" caused the swap file dialog, which isn't displayed,
there would still be a hit-enter prompt.

Requesting the termresponse (|t_RV|) early may cause problems with "-c"
arguments that invoke an external command or even "-c quit".  Postpone it
until after executing "-c" arguments.

When typing in Insert mode so that a new line is started, using CTRL-G u to
break undo and start a new change, then joining the lines with <BS> caused
undo info to be missing.  Now reset the insertion start point.

Syntax HL: When a region start match has a matchgroup and an offset that
happens to be after the end of the line then it continued in the next line and
stopped at the region end match, making the region continue after that.
Now check for the column being past the end of the line in syn_add_end_off().

When changing a file, setting 'swapfile' off and then on again, making another
change and killing Vim, then some blocks may be missing from the swapfile.
When 'swapfile' is switched back on mark all blocks in the swapfile as dirty.
Added mf_set_dirty().

Expanding wildcards in a command like ":e aap;<>!" didn't work.  Put
backslashes before characters that are special to the shell. (Adri Verhoef)

A CursorHold autocommand would cause a message to be cleared.  Don't show the
special key for the event for 'showcmd'.

When expanding a file name for a shell command, as in "!cmd foo<Tab>" or ":r
!cmd foo<Tab>" also escape characters that are special for the shell:
"!;&()<>".

When the name of the buffer was set by a ":r fname" command |cpo-f| no
autocommands were triggered to notify about the change in the buffer list.

In the quickfix buffer 'bufhidden' was set to "delete", which caused closing
the quickfix window to leave an unlisted "No Name" buffer behind every time.

Win32: when using two screens of different size, setting 'lines' to a large
value didn't fill the whole screen. (SungHyun Nam)

Win32 installer: The generated _vimrc contained an absolute path to diff.exe.
After upgrading it becomes invalid.  Now use $VIMRUNTIME instead.

The command line was cleared to often when 'showmode' was set and ":silent
normal vy" was used.  Don't clear the command line unless the mode was
actually displayed.  Added the "mode_displayed" variable.

The "load session" toolbar item could not handle a space or other special
characters in v:this_session.

":set sta ts=8 sw=4 sts=2" deleted 4 spaces halfway a line instead of 2.

In a multi-byte file the foldmarker could be recognized in the trail byte.
(Taro Muraoka)

Pasting with CTRL-V and menu didn't work properly when some commands are
mapped.  Use ":normal!" instead of ":normal". (Tony Apuzzo)

Crashed when expanding a file name argument in backticks.

In some situations the menu and scrollbar didn't work, when the value contains
a CSI byte. (Yukihiro Nakadaira)

GTK GUI: When drawing the balloon focus changes and we might get a key release
event that removed the balloon again.  Ignore the key release event.

'titleold' was included in ":mkexrc" and ":mksession" files.

":set background&" didn't use the same logic as was used when starting up.

When "umask" is set such that nothing is writable then the viminfo file would
be written without write permission. (Julian Bridle)

Motif: In diff mode dragging one scrollbar didn't update the scrollbar of the
other diff'ed window.

When editing in an xterm with a different number of colors than expected the
screen would be cleared and redrawn, causing the message about the edited file
to be cleared.  Now set "keep_msg" to redraw the last message.

For a color terminal: When the Normal HL uses bold, possibly to make the color
lighter, and another HL group specifies a color it might become light as well.
Now reset bold if a HL group doesn't specify bold itself.

When using 256 color xterm the color 255 would show up as color 0.  Use a
short instead of a char to store the color number.

ml_get errors when searching for "\n\zs" in an empty file.

When selecting a block and using "$" to select until the end of every line and
not highlighting the character under the cursor the first character of the
block could be unhighlighted.

When counting words for the Visual block area and using "$" to select until
the end of every line only up to the length of the last line was counted.

"dip" in trailing empty lines left one empty line behind.

The script ID was only remembered globally for each option. When a buffer- or
window-local option was set the same "last set" location was changed for all
buffers and windows.  Now remember the script ID for each local option
separately.

GUI: The "Replace All" button didn't handle backslashes in the replacement in
the same way as "Replace".  Escape backslashes so that they are taken
literally.

When using Select mode from Insert mode and typing a key, causing lines to be
deleted and a message displayed, delayed the effect of inserting the key.
Now overwrite the message without delay.

When 'whichwrap' includes "l" then "dl" and "yl" on a single letter line
worked differently.  Now recognize all operators when using "l" at the end of
a line.

GTK GUI: when the font selector returned a font name with a comma in it then
it would be handled like two font names.  Now put a backslash before the
comma.

MS-DOS, Win32: When 'encoding' defaults to "latin1" then the value for
'iskeyword' was still for CPxxx.  And when 'nocompatible' was set 'isprint'
would also be the wrong value.

When a command was defined not to take arguments and no '|' no warning message
would be given for using a '|'.  Also with ":loadkeymap".

Motif: When using a fontset and 'encoding' is "utf-8" and sizeof(wchar_t) !=
sizeof(XChar2b) then display was wrong. (Yukihiro Nakadaira)

":all" always set the current window to the first window, even when it
contains a buffer that is not in the argument list (can't be closed because it
is modified).  Now go to the window that has the first item of the argument
list.

GUI: To avoid left-over pixels from bold text all characters after a character
with special attributes were redrawn.  Now only do this for characters that
actually are bold.  Speeds up displaying considerably.

When only highlighting changes and the text is scrolled at the same time
everything is redraw instead of using a scroll and updating the changed text.
E.g., when using ":match" to highlight a paren that the cursor landed on.
Added SOME_VALID: Redraw the whole window but also try to scroll to minimize
redrawing.

Win32: When using Korean IME making it active didn't work properly. (Moon,
Yu-sung, 2005 March 21)

Ruby interface: when inserting/deleting lines display wasn't updated. (Ryan
Paul)

--- fixes since Vim 7.0b ---

Getting the GCC version in configure didn't work with Solaris sed.  First
strip any "darwin." and then get the version number.

The "autoload" directory was missing from the self-installing executable for
MS-Windows.

The MS-Windows install program would find "vimtutor.bat" in the install
directory.  After changing to "c:" also change to "\" to avoid looking in the
install directory.

To make the 16 bit DOS version compile exclude not used highlight
initializations and build a tiny instead of small version.

finddir() and findfile() accept a negative cound and return a List then.

The Python indent file contained a few debugging statements, removed.

Expanding {} for a function name, resulting in a name starting with "s:" was
not handled correctly.

Spelling: renamed COMPOUNDMAX to COMPOUNDWORDMAX.  Added several items to be
able to handle the new Hungarian dictionary.

Mac: Default to building for the current platform only, that is much faster
than building a universal binary.  Also, using Perl/Python/etc. only works for
the current platform.

The time on undo messages disappeared for someone.  Using %T for strftime()
apparently doesn't work everywhere.  Use %H:%M:%S instead.

Typing BS at the "z=" prompt removed the prompt.

--- fixes and changes since Vim 7.0c ---

When jumping to another tab page the Vim window size was always set, even when
nothing in the layout changed.

Win32 GUI tab pages line wasn't always enabled.  Do a proper check for the
compiler version.

Win32: When switching between tab pages the Vim window was moved when part of
it was outside of the screen.  Now only do that in the direction of a size
change.

Win32: added menu to GUI tab pages line. (Yegappan Lakshmanan)

Mac: Added document icons. (Benji Fisher)

Insert mode completion: Using Enter to accept the current match causes
confusion.  Use CTRL-Y instead.  Also, use CTRL-E to go back to the typed
text.

GUI: When there are left and righ scrollbars, ":tabedit" kept them instead of
using the one that isn't needed.

Using "gP" to replace al the text could leave the cursor below the last line,
causing ml_get errors.

When 'cursorline' is set don't use the highlighting when Visual mode is
active, otherwise it's difficult to see the selected area.

The matchparen plugin restricts the search to 100 lines, to avoid a long delay
when there are closed folds.

Sometimes using CTRL-X s to list spelling suggestions used text from another
line.

Win32: Set the default for 'isprint' back to the wrong default "@,~-255",
because many people use Windows-1252 while 'encoding' is "latin1".

GTK: Added a workaround for gvim crashing when used over an untrusted ssh
link, caused by GTK doing something nasty. (Ed Catmur)

Win32: The font used for the tab page labels is too big.  Use the system menu
font. (George Reilly)

Win32: Adjusting the window position and size to keep it on the screen didn't
work properly when the taskbar is on the left or top of the screen.

The installman.sh and installml.sh scripts use ${10}, that didn't work with
old shells.  And use "test -f" instead of "test -e".

Win32: When 'encoding' was set in the vimrc then a directory argument for diff
mode didn't work.

GUI: at the inputlist() prompt the cursorshape was adjusted as if the windows
were still at their old position.

The parenmatch plugin didn't remember the highlighting per window.

Using ":bd" for a buffer that's the current window in another tab page caused
a crash.

For a new tab page the 'scroll' option wasn't set to a good default.

Using an end offset for a search "/pat/e" didn't work properly for multi-byte
text. (Yukihiro Nakadaira)

":s/\n/,/" doubled the text when used on the last line.

When "search" is in 'foldopen' "[s" and "]s" now open folds.

When using a numbered function "dict" can be omitted, but "self" didn't work
then.  Always add FC_DICT to the function flags when it's part of a
dictionary.

When "--remote-tab" executes locally it left an empty tab page.

"gvim -u NONE", ":set cursorcolumn", "C" in the second line didn't update
text.  Do update further lines even though the "$" is displayed.

VMS: Support GTK better, also enable +clientserver. (Zoltan Arpadffy)

When highlighting of statusline or tabline is changed there was no redraw to
show the effect.

Mac: Added "CFBundleIdentifier" to infplist.xml.

Added tabpage-local variables t:var.

Win32: Added double-click in tab pages line creates new tab. (Yegappan
Lakshmanan)

Motif: Added GUI tab pages line. (Yegappan Lakshmanan)

Fixed crash when 'lines' was set to 1000 in a modeline.

When init_spellfile() finds a writable directory in 'runtimepath' but it
doesn't contain a "spell" directory, create one.

Win32: executable() also finds "xxd" in the directory where Vim was started,
but "!xxd" doesn't work.  Append the Vim starting directory to $PATH.

The tab page labels are shortened, directory names are reduced to a single
letter by default.  Added the pathshorten() function to allow a user to do the
same.

":saveas" now resets 'readonly' if the file was successfully written.

Set $MYVIMRC file to the first found .vimrc file.
Set $MYGVIMRC file to the first found .gvimrc file.
Added menu item "Startup Settings" that edits the $MYVIMRC file

Added matcharg().

Error message E745 appeared twice.  Renamed one to E786.

Fixed crash when using "au BufRead * Sexplore" and doing ":help".  Was wiping
out a buffer that's still in a window.

":hardcopy" resulted in an error message when 'encoding' is "utf-8" and
'printencoding' is empty.  Now it assumes latin1. (Mike Williams)

The check for the toolbar feature for Motif, depending on certain included
files, wasn't detailed enough, causing building to fail in gui_xmebw.c.

Using CTRL-E in Insert mode completion after CTRL-P inserted the first match
instead of the original text.

When displaying a UTF-8 character with a zero lower byte Vim might think the
previous character is double-wide.

The "nbsp" item of 'listchars' didn't work when 'encoding' was utf-8.

Motif: when Xm/xpm.h is missing gui_xmebw.c would not compile.
HAVE_XM_UNHIGHLIGHTT_H was missing a T.

Mac: Moved the .icns files into src/os_mac_rsrc, so that they can all be
copied at once.  Adjusted the Info.plist file for three icons.

When Visual mode is active while switching to another tabpage could get ml_get
errors.

When 'list' is set, 'nowrap' the $ in the first column caused 'cursorcolumn'
to move to the right.

When a line wraps, 'cursorcolumn' was never displayed past the end of the
line.

'autochdir' was only available when compiled with NetBeans and GUI.  Now it's
a separate feature, also available in the "big" version.

Added CTRL-W gf: open file under cursor in new tab page.

When using the menu in the tab pages line, "New Tab" opens the new tab before
where the click was.  Beyond the labels the new tab appears at the end instead
of after the current tab page.

Inside a mapping with an expression getchar() could not be used.

When vgetc is used recursively vgetc_busy protects it from being used
recursively.  But after a ":normal" command the protection was reset.

":s/a/b/n" didn't work when 'modifiable' was off.

When $VIMRUNTIME includes a multi-byte character then rgb.txt could not be
found. (Yukihiro Nakadaira)

":mkspell" didn't work correctly for non-ASCII affix flags when conversion is
needed on the spell file.

glob('/dir/\$ABC/*') didn't work.

When using several tab pages and changing 'cmdheight' the display could become
messed up.  Now store the value of 'cmdheight' separately for each tab page.

The user of the Enter key while the popup menu is visible was still confusing.
Now use Enter to select the match after using a cursor key.

Added "usetab" to 'switchbuf'.


--- fixes and changes since Vim 7.0d ---

Added CTRL-W T: move a window to a new tab page.

Using CTRL-X s in Insert mode to complete spelling suggestions and using BS
deleted characters before the bad word.

A few small fixes for the VMS makefile. (Zoltan Arpadffy)

With a window of 91 lines 45 cols, ":vsp" scrolled the window.  Copy w_wrow
when splitting a window and skip setting the height when it's already at the
right value.

Using <silent> in a mapping with a shell command and the GUI caused redraw
to use wrong attributes.

Win32: Using MSVC 4.1 for install.exe resulted in the start menu items to be
created in the administrator directory instead of "All Users".  Define the
CSIDL_ items if they are missing.

Motif: The GUI tabline did not use the space above the right scrollbar.  Work
around a bug in the Motif library. (Yegappan Lakshmanan)

The extra files for XML Omni completion are now also installed.
|xml-omni-datafile|

GTK GUI: when 'm' is missing from 'guioptions' during startup and pressing
<F10> GTK produced error messages.  Now do create the menu but disable it just
after the first gui_mch_update().

":mkspell" doesn't work well with the Hungarian dictionary from the Hunspell
project.  Back to the Myspell dictionary.

In help files hide the | used around tags.

Renamed pycomplete to pythoncomplete.

Added "tabpages" to 'sessionoptions'.

When 'guitablabel' is set the effect wasn't visible right away.

Fixed a few 'cindent' errors.

When completing menu names, e.g., after ":emenu", don't sort the entries but
keep them in the original order.

Fixed a crash when editing a directory in diff mode.  Don't trigger
autocommands when executing the diff command.

Getting a keystroke could get stuck if 'encoding' is a multi-byte encoding and
typing a special key.

When 'foldignore' is set the folds were not updated right away.

When a list is indexed with [a : b] and b was greater than the length an error
message was given.  Now silently truncate the result.

When using BS during Insert mode completion go back to the original text, so
that CTRL-N selects the first matching entry.

Added the 'M' flag to 'cinoptions'.

Win32: Make the "gvim --help" window appear in the middle of the screen
instead of at an arbitrary position. (Randall W. Morris)

Added gettabwinvar() and settabwinvar().

Command line completion: pressing <Tab> after ":e /usr/*" expands the whole
tree, because it becomes ":e /usr/**".  Don't add a star if there already is
one.

Added grey10 to grey90 to all GUIs, so that they can all be used for
initializing highlighting.  Use grey40 for CursorColumn and CursorLine when
'background' is "dark".

When reading a file and using iconv for conversion, an incomplete byte
sequence at the end caused problems. (Yukihiro Nakadaira)


--- fixes and changes since Vim 7.0e ---

Default color for MatchParen when 'background' is "dark" is now DarkCyan.

":syn off" had to be used twice in a file that sets 'syntax' in a modeline.
(Michael Geddes)

When using ":vsp" or ":sp" the available space wasn't used equally between
windows. (Servatius Brandt)

Expanding <cWORD> on a trailing blank resulted in the first word in the line
if 'encoding' is a multi-byte encoding.

Spell checking: spellbadword() didn't see a missing capital in the first word
of a line.  Popup menu now only suggest the capitalized word when appropriate.

When using whole line completion CTRL-L moves through the matches but it
didn't work when at the original text.

When completion finds the longest match, don't go to the first match but stick
at the original text, so that CTRL-N selects the first one.

Recognize "zsh-beta" like "zsh" for setting the 'shellpipe' default. (James
Vega)

When using ":map <expr>" and the expression results in something with a
special byte (NUL or CSI) then it didn't work properly.  Now escape special
bytes.

The default Visual highlighting for a color xterm with 8 colors was a magenta
background, which made magenta text disappear.  Now use reverse in this
specific situation.

After completing the longest match "." didn't insert the same text.  Repeating
also didn't work correctly for multi-byte text.

When using Insert mode completion and BS the whole word that was completed
would result in all possible matches.  Now stop completion.  Also fixes that
for spell completion the previous word was deleted.

GTK: When 'encoding' is "latin1" and using non-ASCII characters in a file name
the tab page label was wrong and an error message would be given.

The taglist() function could hang on a tags line with a non-ASCII character.

Win32: When 'encoding' differs from the system encoding tab page labels with
non-ASCII characters looked wrong. (Yegappan Lakshmanan)

Motif: building failed when Xm/Notebook.h doesn't exist.  Added a configure
check, disable GUI tabline when it's missing.

Mac: When compiled without multi-byte feature the clipboard didn't work.

It was possible to switch to another tab page when the cmdline window is open.

Completion could hang when 'lines' is 6 and a preview window was opened.

Added CTRL-W gF: open file under cursor in new tab page and jump to the line
number following the file name.
Added 'guitabtooltip'.  Implemented for Win32 (Yegappan Lakshmanan).

Added "throw" to 'debug' option: thow an exception for error messages even
whey they would otherwise be ignored.

When 'keymap' is set and a line contains an invalid entry could get a "No
mapping found" warning instead of a proper error message.

Motif: default to using XpmAttributes instead of XpmAttributes_21.

A few more changes for 64 bit MS-Windows. (George Reilly)

Got ml_get errors when doing "o" and selecting in other window where there are
less line shorter than the cursor position in the other window.  ins_mouse()
was using position in wrong window.

Win32 GUI: Crash when giving a lot of messages during startup.  Allocate twice
as much memory for the dialog template.

Fixed a few leaks and wrong pointer use reported by coverity.

When showing menus the mode character was sometimes wrong.

Added feedkeys(). (Yakov Lerner)

Made matchlist() always return all submatches.

Moved triggering QuickFixCmdPost to before jumping to the first location.

Mac: Added the 'macatsui' option as a temporary work around for text drawing
problems.

Line completion on "/**" gave error messages when scanning an unloaded buffer.

--- fixes and changes since Vim 7.0f ---

Win32: The height of the tab page labels is now adjusted to the font height.
(Yegappan Lakshmanan)

Win32: selecting the tab label was off by one. (Yegappan Lakshmanan)

Added tooltips for Motif and GTK tab page labels. (Yegappan Lakshmanan)

When 'encoding' is "utf-8" then ":help spell" would report an illegal byte and
the file was not converted from latin1 to utf-8.  Now retry with latin1 if
reading the file as utf-8 results in illegal bytes.

Escape the argument of feedkeys() before putting it in the typeahead buffer.
(Yukihiro Nakadaira)

Added the v:char variable for evaluating 'formatexpr'. (Yukihiro Nakadaira)

With 8 colors Search highlighting combined with Statement highlighted text
made the text disappear.

VMS: avoid warnings for redefining MAX and MIN. (Zoltan Arpadffy)

When 'virtualedit' includes "onemore", stopping Visual selection would still
move the cursor left.

Prevent that using CTRL-R = in Insert mode can start Visual mode.

Fixed a crash that occured when in Insert mode with completion active and a
mapping caused edit() to be called recursively.

When using CTRL-O in Insert mode just after the last character while
'virtualedit' is "all", then typing CR moved the last character to the next
line.  Call coladvance() before starting the new line.

When using |:shell| ignore clicks on the tab page labels.  Also when using the
command line window.

When 'eventignore' is "all" then adding more to ignoring some events, e.g.,
for ":vimgrep", would actually trigger more events.

Win32: When a running Vim uses server name GVIM1 then "gvim --remote fname"
didn't find it.  When looking for a server name that doesn't end in a digit
and it is not found then use another server with that name and a number (just
like on Unix).

When using "double" in 'spellsuggest' when the language doesn't support sound
folding resulted in too many suggestions.

Win32: Dropping a shortcut on the Vim icon did't edit the referred file like
editing it in another way would.  Use fname_expand() in buf_set_name() instead
of simply make the file name a full path.

Using feedkeys() could cause Vim to hang.

When closing another tab page from the tabline menu in Insert mode the tabline
was not updated right away.

The syntax menu didn't work in compatible mode.

After using ":tag id" twice with the same "id", ":ts" and then ":pop" a ":ts"
reported no matching tag.  Clear the cached tag name.

In Insert mode the matchparen plugin highlighted the wrong paren when there is
a string just next to a paren.

GTK: After opening a new tab page the text was sometimes not drawn correctly.
Flush output and catch up with events when updating the tab page labels.

In the GUI, using CTRL-W q to close the last window of a tab page could cause
a crash.

GTK: The tab pages line menu was not converted from 'encoding' to utf-8.

Typing a multi-byte character or a special key at the hit-enter prompt did not
work.

When 'virtualedit' contains "onemore" CTRL-O in Insert mode still moved the
cursor left when it was after the end of the line, even though it's allowed to
be there.

Added test for using tab pages.

towupper() and towlower() were not used, because of checking for
__STDC__ISO_10646__ instead of __STDC_ISO_10646__. (sertacyildiz)

For ":map <expr>" forbid changing the text, jumping to another buffer and
using ":normal" to avoid nasty side effects.

--- fixes and changes since Vim 7.0g ---

Compilation error on HP-UX, use of "dlerr" must be inside a #ifdef.
(Gary Johnson)

Report +reltime feature in ":version" output.

The tar and zip plugins detect failure to get the contents of the archive and
edit the file as-is.

When the result of 'guitablabel' is empty fall back to the default label.

Fixed crash when using ":insert" in a while loop and missing "endwhile".

"gt" and other commands could move to another window when |textlock| active
and when the command line window was open.

Spell checking a file with syntax highlighting and a bad word at the end of
the line is ignored could make "]s" hang.

Mac: inputdialog() didn't work when compiled with big features.

Interrupting ":vimgrep" while it is busy loading a file left a modified and
hidden buffer behind.  Use enter_cleanup() and leave_cleanup() around
wipe_buffer().

When making 'keymap' empty the b:keymap_name variable wasn't deleted.

Using CTRL-N that searches a long time, pressing space to interrupt the
searching and accept the first match, the popup menu was still displayed
briefly.

When setting the Vim window height with -geometry the 'window' option could be
at a value that makes CTRL-F behave differently.

When opening a quickfix window in two tabs they used different buffers,
causing redrawing problems later.  Now use the same buffer for all quickfix
windows. (Yegappan Lakshmanan)

When 'mousefocus' is set moving the mouse to the text tab pages line would
move focus to the first window.  Also, the mouse pointer would jump to the
active window.

In a session file, when an empty buffer is wiped out, do this silently.

When one window has the cursor on the last line and another window is resized
to make that window smaller, the cursor line could go below the displayed
lines.  In win_new_height() subtract one from the available space.
Also avoid that using "~" lines makes the window scroll down.

Mac: When sourcing the "macmap.vim" script and then finding a .vimrc file the
'cpo' option isn't set properly, because it was already set and restored.
Added the <special> argument to ":map", so that 'cpo' doesn't need to be
changed to be able to use <> notation.  Also do this for ":menu" for
consistency.

When using "/encoding=abc" in a spell word list, only "bc" was used.

When 'encoding' and 'printencoding' were both "utf-8" then ":hardcopy" didn't
work. (Mike Williams)

Mac: When building with "--disable-gui" the install directory would still be
"/Applications" and Vim.app would be installed.  Now install in /usr/local as
usual for a console application.

GUI: when doing completion and there is one match and still searching for
another, the cursor was displayed at the end of the line instead of after the
match.  Now show the cursor after the match while still searching for matches.

GUI: The mouse shape changed on the statusline even when 'mouse' was empty and
they can't be dragged..

GTK2: Selecting a button in the confirm() dialog with Tab or cursor keys and
hitting Enter didn't select that button.  Removed GTK 1 specific code. (Neil
Bird)

When evaluating 'balloonexpr' takes a long time it could be called
recursively, which could cause a crash.

exists() could not be used to detect whether ":2match" is supported.  Added a
check for it specifically.

GTK1: Tab page labels didn't work. (Yegappan Lakshmanan)

Insert mode completion: When finding matches use 'ignorecase', but when adding
matches to the list don't use it, so that all words with different case are
added, "word", "Word" and "WORD".

When 'cursorline' and 'hlsearch' are set and the search pattern is "x\n"
the rest of the line was highlighted as a match.

Cursor moved while evaluating 'balloonexpr' that invokes ":isearch" and
redirects the output.  Don't move the cursor to the command line if msg_silent
is set.

exists() ignored text after a function name and option name, which could
result in false positives.

exists() ignored characters after the recognized word, which can be wrong when
using a name with non-keyword characters.  Specifically, these calls no longer
allow characters after the name: exists('*funcname') exists('*funcname(...')
exists('&option') exists(':cmd') exists('g:name') exists('g:name[n]')
exists('g:name.n')

Trigger the TabEnter autocommand only after entering the current window of the
tab page, otherwise the commands are executed with an invalid current window.

Win32: When using two monitors and Vim is on the second monitor, changing the
width of the Vim window could make it jump to the first monitor.

When scrolling back at the more prompt and the quitting a line of text would
be left behind when 'cmdheight' is 2 or more.

Fixed a few things for Insert mode completion, especially when typing BS,
CTRL-N or a printable character while still searching for matches.


 vim:tw=78:ts=8:ft=help:norl:
